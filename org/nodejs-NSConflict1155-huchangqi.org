* 前端知识
- HTML 
    - 什么是 doctype
    - 行内元素和块级元素
    - 流行的浏览器内核
    - html 语义化

- CSS
    - 选择器
    - 盒模型
    - 浮动与清除浮动
    - 定位
    - 兼容性处理
    - 响应式设计
    - 布局技巧
    - 性能优化 
    - css 预处理器
    
- JS 基础
    - 变量与函数声明
    - 作用域
    - this 对象
    - 闭包
    - 数组方法
    - 对象和 JSON
    - 原型与原型链
    - 继承与多态
    - call 与 apply
    - ajax
    - 异步与同步的区别
    - 跨域处理
    - window 对象
    - 正则表达式
    - 事件处理
    - DOM 操作

- JS 进阶
    - Promise 对象
    - 各类模块加载器及其原理
        - requirejs
            - 加载机制
        - seajs
            - 加载机制
            - seajs 的懒加载
    - 移动端开发
        - 事件处理
        - 解决点透问题
    - 前端构建工具的使用
        - webpack 的使用
        - fis 的使用
    - ES6
        - generator
        - let, var, const
        - 函数的扩展
        - 数组的扩展
        - 对象的扩展
        - class
    - 异步处理
        - Promise
        - async await
    - jquery 相关源码剖析
        - 链式调用
        - 事件
        - ajax
        - 选择器
        - 缓存

- Node.js
    - 什么是 Node.js
    - node.js 的模块机制
    - node.js 的核心模块
    - 理解异步 I/O
    - express 基本使用
    - gulp 自动化工具流
    - 数据库连接与操作
    - 路由操作
    - 登陆验证
    - 中间件
    - orm 数据库对象模型
    - 安全验证
    - 搭建一个简单博客系统

-  JS 高级
    - React 框架使用
        - JSX
        - 组件
        - 子节点和数据传递
        - 神奇的 ref 属性
        - 事件
        - 组件的声明周期
        - 控制渲染来优化性能
        - 通过后端渲染来提升首屏
    - Redux 的使用
        - Redux 的开发守则
        - Actions
        - Reducers
        - Store
        - react-redux
        - 使用 redux-devtools
        - 异步 Actions
        - 异步数据流
        - 中间件
        - 基于 redux react 的后端渲染
    - 完整开发一个 spa 应用
* 代码组织和部署
** 模块路径解释规则
   1. 内置模块
   2. node_modules 目录
   3. NODE_PATH 环境变量
** package
   1. index.js 模块的文件名是 index.js
   2. package.json 包目录下包含一个 package.json
* 对象 
  js 中所有的数据类型都是对象(object)
  js 中，对象就是一个键/值 对的集合 你可以把 js 的对象想象成一个键为字符串类型的字典 值可以是字符串，数字，函数

  1. 使用构造函数模拟"类”， 在内部使用 this 指代实例对象
  2. Object.create()
  3. createNew
     #+BEGIN_SRC js
       var Cat = {
           createNew: function(){
               var cat = {};
               cat.name = "maomao";
               cat.makeSound = function(){alert("wangwang");};
               return cat;
           }
       }
       //使用的时候调用 createNew()

       var cat1 = Cat.createNew();
       cat1.makeSound();
     #+END_SRC
** 继承
   prototype 属性 (prototype 对象）
   所用实例对象需要共享的属性和方法，都放在这个对象中，不需要共享的属性和方法就放在构造函数里面
   实例对象一旦创建，自动引用 prototype 对象的属性和方法，实例对象的属性和方法分成两种，一种在本地，一种是引用
* Function
  [[https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions]]
  1. 函数声明 
     function name(param){
     
     }
  2. 函数表达式
     var name = function(param){
   
  }
  3. 函数构造器 (低效)
     var adder = new Function("a","b","return a + b");
** 函数参数的默认值
   a = a || "defaultValue"
   如果 || 左侧表达式为真，则返回左侧表达式的值；否则返回右侧表达式的值
   #es6
   function log(x, y = 'world'){
   console.log(x, y);
   }
** bind
   fun.bind(thisArg[,arg1[arg2[,...]]])
   bind 会创建一个新函数，当这个新函数被调用时，bind 的第一个参数将作为它运行时的 this
   配合 setTimeout 使用 
   #+BEGIN_SRC js
     function Bomb() {
         this.message = 'Boom';
     }
     Bomb.prototype.explode = function(){
         console.log(this.message);
     };
     Bomb.prototype.delay_explode = function(){
         setTimeout(this.explode.bind(this),100);
     };
     var bomb = new Bomb();
     Bomb.delay_explode();

   #+END_SRC
** call apply
   fun.call(thisArg[,arg1[,arg2[,...]]])
   call 方法在一个指定的 this 值和若个个指定的参数值 的情况下调用某个函数或方法
   fun.apply(thisArg[,argArray]) 参数是数组形式 // scheme 中的（apply function argument-list)
** eval() 是全局对象的一个函数属性
   eval(string) 
* 闭包
  闭包是指那些能够访问独立(自由)变量的函数 (变量在本地使用，但定义在一个封闭的作用域中)。
  换句话说，这些函数可以“记忆”它被创建时候的环境。
  [[https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures]]
** 区分内部函数和闭包
   # 内部函数 (其实是词法作用域 Lexical scoping
   function init() {
      var name = "Mozilla"; // name 是被 init 创建的局部变量
      function displayName() { // displayName()是一个内部函数,
      alert(name); // 它是一个使用在父函数中声明的变量的闭包
      } 
      displayName();
  }
  init();
   # 闭包
   function makeAdder(a) {
    return function(b) {
        return a + b;
    }
    }
    var x = makeAdder(5);
    var y = makeAdder(20);
    x(6); // ?
    y(7); // ?

   每当 JavaScript 执行一个函数时，都会创建一个作用域对象（scope object），用来保存在这个函数中创建的局部变量。它和被传入函数的变量一起被初始化。这与那些保存的所有全局变量和函数的全局对象（global object）类似，但仍有一些很重要的区别，第一，每次函数被执行的时候，就会创建一个新的，特定的作用域对象；第二，与全局对象（在浏览器里面是当做 window 对象来访问的）不同的是，你不能从 JavaScript 代码中直接访问作用域对象，也没有可以遍历当前的作用域对象里面属性的方法。
   
   所以当调用 makeAdder 时，解释器创建了一个作用域对象，它带有一个属性：a，这个属性被当作参数传入 makeAdder 函数。然后 makeAdder 返回一个新创建的函数。通常 JavaScript 的垃圾回收器会在这时回收 makeAdder 创建的作用域对象，但是返回的函数却保留一个指向那个作用域对象的引用。结果是这个作用域对象不会被垃圾回收器回收，直到指向 makeAdder 返回的那个函数对象的引用计数为零。

   作用域对象组成了一个名为作用域链（scope chain）的链。它类似于原形（prototype）链一样，被 JavaScript 的对象系统使用。

   一个闭包就是一个函数和被创建的函数中的作用域对象的组合。

闭包允许你保存状态——所以它们通常可以代替对象来使用。
* 原型
  Prototypes are the mechanism by which JavaScript objects inherit features from one another, 
  通过原型这种机制，js 中的对象从其他对象继承功能
** 继承
   + Object.create
   + 创建一个中间对象

   #+BEGIN_SRC js
     if (typeof Object.create === 'function') {
         // implementation from standard node.js 'util' module
         module.exports = function inherits(ctor, superCtor) {
             ctor.super_ = superCtor
             ctor.prototype = Object.create(superCtor.prototype, {
                 constructor: {
                     value: ctor,
                     enumerable: false,
                     writable: true,
                     configurable: true
                 }
             });
         };
     } else {
         // old school shim for old browsers
         module.exports = function inherits(ctor, superCtor) {
             ctor.super_ = superCtor
             var TempCtor = function () {} //中间对象 TempCtor
             TempCtor.prototype = superCtor.prototype // TempCtor 的原型指向父类的原型
             ctor.prototype = new TempCtor()// ctor 的原型指向一个新的 Temp 对象，新 Temp 对象的原型正好指向 superCtor.prototype
             ctor.prototype.constructor = ctor //修复原型构造函数
         }
     }
   #+END_SRC
** __proto__ 和 prototype
 JS 当然没有“类”，只有 constructor。
 constructor 就是当你 new fn()时的那个“fn”。
 当你 new fn 的时候，产生的实例的__proto__指向 fn.prototype，两者是同一个东西。

  function Foo() {}
  var myfoo = new Foo();
  myfoo.__proto__ === Foo.prototype

* exports 和 module.exports 区别
  1. module.exports 初始化一个空对象{}
  2. exports 是指向 module.exports 的引用
  3. require() 返回的是 module.exports 而不是 exports
* promise
  promise 对象就是对一个异步任务的封装
  promise 提供了 then 方法 (catch finally 都是特殊的 then
  then 方法 接受一个 function 或者 是一个 promise 对象
** then
   传入 function
   then 对 function 的返回值判断是不是 promise 对象
   1. 是 把它插入到当前链式操作中，后面的 then 会在这个 promise 对象完成之后继续
   2. 否 把这个返回值传入到下一个 then 中
   
   传入 promise 对象
   等待该 promise 对象执行完成，再执行当前的链，
* 异步，回调，EventLoop
  [[http://blog.csdn.net/tywinstark/article/details/48447135]]
  1. 不是回调
     #+BEGIN_SRC js : results output
       function Foo(a, cb) {
           console.log(a);
           //do something
           cb(Math.random());
       }
       var callback = function(num){
           console.log(num);
       }
       Foo(2, callback);
     #+END_SRC
  2. 异步
     #+BEGIN_SRC js
       function Add(a, b){
           return a+b;
       }
       function LazyAdd(a){
           return function(b){
               return a+b;
           }
       }

       // result 是一个闭包 ，我们把一个持有外层参数 a 的匿名函数构成的闭包保存到变量 result 中
       // 极端情况 var result = LazyAdd(1)(2); 不属于异步， 和同步没区别
       var result = LazyAdd(1);

       // do something
       // 实际生产中可能等待一些条件成立，再去执行另一半

       result = result(2)
     #+END_SRC
  3. 回调
     #+BEGIN_SRC js
       function Add(a, b) {
           return a+b;
       }
       // LazyAdd 多了一个参数 cb
       function LazyAdd(a, cb){
           return function(b){
               cb(a, b);
           }
       }
       // 将 Add 传给形参 cb
       var result = LazyAdd(1, Add)
       //do something
       result = result(2);
     #+END_SRC
     // 带有状态的才叫回调函数，own state，这里通过闭包保存的 a 就是状态
* c++ 
  [[https://nodejs.org/dist/latest-v6.x/docs/api/addons.html]]prototype 是“类”的原型，__proto__是对象的原型。

* extends 关键字被用在类声明或者类表达式上
  class ChildClass extends ParentClass{ ... }
* stream
  [[https://cnodejs.org/topic/570b1fa494b38dcb3c09a7f8]]
  [[https://github.com/zoubin/engineering/tree/master/docs/node-stream]]
* restify
  1. restify.createServer();
  2. Common handlers:
     server.use()
     handlers of the form function (req, res, next)
     Note that restify runs handlers in the order they are registered on a server, 
     so if you want some common handlers to run before any of your routes, 
     issue calls to use() before defining routes.
  3. Note the use of next(). You are responsible for calling next() 
     in order to run the next handler in the chain.
* EventEmitter (观察者模式
** redis 生产者消费者模式
