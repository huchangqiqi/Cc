// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef PROTOBUF_test_2eproto__INCLUDED
#define PROTOBUF_test_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class SearchRequest;
class SearchRequestDefaultTypeInternal;
extern SearchRequestDefaultTypeInternal _SearchRequest_default_instance_;

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_test_2eproto();
void protobuf_InitDefaults_test_2eproto();

enum SearchRequest_Corpus {
  SearchRequest_Corpus_UNIVERSAL = 0,
  SearchRequest_Corpus_WEB = 1,
  SearchRequest_Corpus_IMAGES = 2,
  SearchRequest_Corpus_LOCAL = 3,
  SearchRequest_Corpus_NEWS = 4,
  SearchRequest_Corpus_PRODUCTS = 5,
  SearchRequest_Corpus_VIDEO = 6,
  SearchRequest_Corpus_SearchRequest_Corpus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SearchRequest_Corpus_SearchRequest_Corpus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SearchRequest_Corpus_IsValid(int value);
const SearchRequest_Corpus SearchRequest_Corpus_Corpus_MIN = SearchRequest_Corpus_UNIVERSAL;
const SearchRequest_Corpus SearchRequest_Corpus_Corpus_MAX = SearchRequest_Corpus_VIDEO;
const int SearchRequest_Corpus_Corpus_ARRAYSIZE = SearchRequest_Corpus_Corpus_MAX + 1;

const ::google::protobuf::EnumDescriptor* SearchRequest_Corpus_descriptor();
inline const ::std::string& SearchRequest_Corpus_Name(SearchRequest_Corpus value) {
  return ::google::protobuf::internal::NameOfEnum(
    SearchRequest_Corpus_descriptor(), value);
}
inline bool SearchRequest_Corpus_Parse(
    const ::std::string& name, SearchRequest_Corpus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SearchRequest_Corpus>(
    SearchRequest_Corpus_descriptor(), name, value);
}
enum EnumAllowingAlias {
  UNKNOWN = 0,
  STARTED = 1,
  RUNNING = 1,
  EnumAllowingAlias_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EnumAllowingAlias_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EnumAllowingAlias_IsValid(int value);
const EnumAllowingAlias EnumAllowingAlias_MIN = UNKNOWN;
const EnumAllowingAlias EnumAllowingAlias_MAX = STARTED;
const int EnumAllowingAlias_ARRAYSIZE = EnumAllowingAlias_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnumAllowingAlias_descriptor();
inline const ::std::string& EnumAllowingAlias_Name(EnumAllowingAlias value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnumAllowingAlias_descriptor(), value);
}
inline bool EnumAllowingAlias_Parse(
    const ::std::string& name, EnumAllowingAlias* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnumAllowingAlias>(
    EnumAllowingAlias_descriptor(), name, value);
}
// ===================================================================

class SearchRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SearchRequest) */ {
 public:
  SearchRequest();
  virtual ~SearchRequest();

  SearchRequest(const SearchRequest& from);

  inline SearchRequest& operator=(const SearchRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchRequest& default_instance();

  static inline const SearchRequest* internal_default_instance() {
    return reinterpret_cast<const SearchRequest*>(
               &_SearchRequest_default_instance_);
  }

  void UnsafeArenaSwap(SearchRequest* other);
  void Swap(SearchRequest* other);

  // implements Message ----------------------------------------------

  inline SearchRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SearchRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SearchRequest& from);
  void MergeFrom(const SearchRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SearchRequest* other);
  protected:
  explicit SearchRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SearchRequest_Corpus Corpus;
  static const Corpus UNIVERSAL =
    SearchRequest_Corpus_UNIVERSAL;
  static const Corpus WEB =
    SearchRequest_Corpus_WEB;
  static const Corpus IMAGES =
    SearchRequest_Corpus_IMAGES;
  static const Corpus LOCAL =
    SearchRequest_Corpus_LOCAL;
  static const Corpus NEWS =
    SearchRequest_Corpus_NEWS;
  static const Corpus PRODUCTS =
    SearchRequest_Corpus_PRODUCTS;
  static const Corpus VIDEO =
    SearchRequest_Corpus_VIDEO;
  static inline bool Corpus_IsValid(int value) {
    return SearchRequest_Corpus_IsValid(value);
  }
  static const Corpus Corpus_MIN =
    SearchRequest_Corpus_Corpus_MIN;
  static const Corpus Corpus_MAX =
    SearchRequest_Corpus_Corpus_MAX;
  static const int Corpus_ARRAYSIZE =
    SearchRequest_Corpus_Corpus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Corpus_descriptor() {
    return SearchRequest_Corpus_descriptor();
  }
  static inline const ::std::string& Corpus_Name(Corpus value) {
    return SearchRequest_Corpus_Name(value);
  }
  static inline bool Corpus_Parse(const ::std::string& name,
      Corpus* value) {
    return SearchRequest_Corpus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);
  ::std::string* unsafe_arena_release_query();
  void unsafe_arena_set_allocated_query(
      ::std::string* query);

  // int32 page_number = 2;
  void clear_page_number();
  static const int kPageNumberFieldNumber = 2;
  ::google::protobuf::int32 page_number() const;
  void set_page_number(::google::protobuf::int32 value);

  // int32 result_per_page = 3;
  void clear_result_per_page();
  static const int kResultPerPageFieldNumber = 3;
  ::google::protobuf::int32 result_per_page() const;
  void set_result_per_page(::google::protobuf::int32 value);

  // .SearchRequest.Corpus corpus = 4;
  void clear_corpus();
  static const int kCorpusFieldNumber = 4;
  ::SearchRequest_Corpus corpus() const;
  void set_corpus(::SearchRequest_Corpus value);

  // @@protoc_insertion_point(class_scope:SearchRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::google::protobuf::int32 page_number_;
  ::google::protobuf::int32 result_per_page_;
  int corpus_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_test_2eproto_impl();
  friend void  protobuf_AddDesc_test_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchRequest

// string query = 1;
inline void SearchRequest::clear_query() {
  query_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SearchRequest::query() const {
  // @@protoc_insertion_point(field_get:SearchRequest.query)
  return query_.Get();
}
inline void SearchRequest::set_query(const ::std::string& value) {
  
  query_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:SearchRequest.query)
}
inline void SearchRequest::set_query(const char* value) {
  
  query_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:SearchRequest.query)
}
inline void SearchRequest::set_query(const char* value,
    size_t size) {
  
  query_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:SearchRequest.query)
}
inline ::std::string* SearchRequest::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:SearchRequest.query)
  return query_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SearchRequest::release_query() {
  // @@protoc_insertion_point(field_release:SearchRequest.query)
  
  return query_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SearchRequest::unsafe_arena_release_query() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SearchRequest.query)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return query_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SearchRequest::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:SearchRequest.query)
}
inline void SearchRequest::unsafe_arena_set_allocated_query(
    ::std::string* query) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (query != NULL) {
    
  } else {
    
  }
  query_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      query, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SearchRequest.query)
}

// int32 page_number = 2;
inline void SearchRequest::clear_page_number() {
  page_number_ = 0;
}
inline ::google::protobuf::int32 SearchRequest::page_number() const {
  // @@protoc_insertion_point(field_get:SearchRequest.page_number)
  return page_number_;
}
inline void SearchRequest::set_page_number(::google::protobuf::int32 value) {
  
  page_number_ = value;
  // @@protoc_insertion_point(field_set:SearchRequest.page_number)
}

// int32 result_per_page = 3;
inline void SearchRequest::clear_result_per_page() {
  result_per_page_ = 0;
}
inline ::google::protobuf::int32 SearchRequest::result_per_page() const {
  // @@protoc_insertion_point(field_get:SearchRequest.result_per_page)
  return result_per_page_;
}
inline void SearchRequest::set_result_per_page(::google::protobuf::int32 value) {
  
  result_per_page_ = value;
  // @@protoc_insertion_point(field_set:SearchRequest.result_per_page)
}

// .SearchRequest.Corpus corpus = 4;
inline void SearchRequest::clear_corpus() {
  corpus_ = 0;
}
inline ::SearchRequest_Corpus SearchRequest::corpus() const {
  // @@protoc_insertion_point(field_get:SearchRequest.corpus)
  return static_cast< ::SearchRequest_Corpus >(corpus_);
}
inline void SearchRequest::set_corpus(::SearchRequest_Corpus value) {
  
  corpus_ = value;
  // @@protoc_insertion_point(field_set:SearchRequest.corpus)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::SearchRequest_Corpus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SearchRequest_Corpus>() {
  return ::SearchRequest_Corpus_descriptor();
}
template <> struct is_proto_enum< ::EnumAllowingAlias> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EnumAllowingAlias>() {
  return ::EnumAllowingAlias_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_test_2eproto__INCLUDED
