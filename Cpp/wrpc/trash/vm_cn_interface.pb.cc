// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vm_cn_interface.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "vm_cn_interface.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace wwit {
namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* Disk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Disk_reflection_ = NULL;
const ::google::protobuf::Descriptor* Nic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Nic_reflection_ = NULL;
const ::google::protobuf::Descriptor* VMMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VMMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* VMMessage_RoutesEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* instruction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  instruction_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_vm_5fcn_5finterface_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_vm_5fcn_5finterface_2eproto() {
  protobuf_AddDesc_vm_5fcn_5finterface_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "vm_cn_interface.proto");
  GOOGLE_CHECK(file != NULL);
  Disk_descriptor_ = file->message_type(0);
  static const int Disk_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Disk, boot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Disk, image_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Disk, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Disk, media_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Disk, model_),
  };
  Disk_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Disk_descriptor_,
      Disk::internal_default_instance(),
      Disk_offsets_,
      -1,
      -1,
      -1,
      sizeof(Disk),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Disk, _internal_metadata_));
  Nic_descriptor_ = file->message_type(1);
  static const int Nic_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Nic, blocked_outgoing_ports_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Nic, allowed_ips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Nic, dhcp_server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Nic, gateway_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Nic, gateways_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Nic, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Nic, ips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Nic, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Nic, nic_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Nic, primary_),
  };
  Nic_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Nic_descriptor_,
      Nic::internal_default_instance(),
      Nic_offsets_,
      -1,
      -1,
      -1,
      sizeof(Nic),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Nic, _internal_metadata_));
  VMMessage_descriptor_ = file->message_type(2);
  static const int VMMessage_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VMMessage, alias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VMMessage, archive_on_delete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VMMessage, brand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VMMessage, disks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VMMessage, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VMMessage, firewall_enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VMMessage, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VMMessage, nics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VMMessage, ram_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VMMessage, resolvers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VMMessage, routes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VMMessage, vcpus_),
  };
  VMMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VMMessage_descriptor_,
      VMMessage::internal_default_instance(),
      VMMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(VMMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VMMessage, _internal_metadata_));
  VMMessage_RoutesEntry_descriptor_ = VMMessage_descriptor_->nested_type(0);
  instruction_descriptor_ = file->message_type(3);
  static const int instruction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instruction, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instruction, details_),
  };
  instruction_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      instruction_descriptor_,
      instruction::internal_default_instance(),
      instruction_offsets_,
      -1,
      -1,
      -1,
      sizeof(instruction),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instruction, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_vm_5fcn_5finterface_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Disk_descriptor_, Disk::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Nic_descriptor_, Nic::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VMMessage_descriptor_, VMMessage::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        VMMessage_RoutesEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                VMMessage_RoutesEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      instruction_descriptor_, instruction::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_vm_5fcn_5finterface_2eproto() {
  Disk_default_instance_.Shutdown();
  delete Disk_reflection_;
  Nic_default_instance_.Shutdown();
  delete Nic_reflection_;
  VMMessage_default_instance_.Shutdown();
  delete VMMessage_reflection_;
  instruction_default_instance_.Shutdown();
  delete instruction_reflection_;
}

void protobuf_InitDefaults_vm_5fcn_5finterface_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2fany_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  Disk_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Nic_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  VMMessage_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  instruction_default_instance_.DefaultConstruct();
  Disk_default_instance_.get_mutable()->InitAsDefaultInstance();
  Nic_default_instance_.get_mutable()->InitAsDefaultInstance();
  VMMessage_default_instance_.get_mutable()->InitAsDefaultInstance();
  instruction_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_vm_5fcn_5finterface_2eproto_once_);
void protobuf_InitDefaults_vm_5fcn_5finterface_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_vm_5fcn_5finterface_2eproto_once_,
                 &protobuf_InitDefaults_vm_5fcn_5finterface_2eproto_impl);
}
void protobuf_AddDesc_vm_5fcn_5finterface_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_vm_5fcn_5finterface_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025vm_cn_interface.proto\022\rwwit.protobuf\032\031"
    "google/protobuf/any.proto\"T\n\004Disk\022\014\n\004boo"
    "t\030\002 \001(\010\022\022\n\nimage_uuid\030\007 \001(\t\022\014\n\004size\030\t \001("
    "\021\022\r\n\005media\030\n \001(\t\022\r\n\005model\030\013 \001(\t\"\274\001\n\003Nic\022"
    "\036\n\026blocked_outgoing_ports\030\006 \003(\021\022\023\n\013allow"
    "ed_ips\030\007 \003(\t\022\023\n\013dhcp_server\030\010 \001(\010\022\017\n\007gat"
    "eway\030\t \001(\t\022\020\n\010gateways\030\n \003(\t\022\n\n\002ip\030\014 \001(\t"
    "\022\013\n\003ips\030\r \003(\t\022\r\n\005model\030\017 \001(\t\022\017\n\007nic_tag\030"
    "\023 \001(\t\022\017\n\007primary\030\024 \001(\010\"\331\002\n\tVMMessage\022\r\n\005"
    "alias\030\001 \001(\t\022\031\n\021archive_on_delete\030\002 \001(\010\022\r"
    "\n\005brand\030\005 \001(\t\022\"\n\005disks\030\t \003(\0132\023.wwit.prot"
    "obuf.Disk\022\016\n\006domain\030\014 \001(\t\022\027\n\017firewall_en"
    "able\030\016 \001(\010\022\020\n\010hostname\030\020 \001(\t\022 \n\004nics\030\033 \003"
    "(\0132\022.wwit.protobuf.Nic\022\013\n\003ram\030$ \001(\021\022\021\n\tr"
    "esolvers\030% \003(\t\0224\n\006routes\030& \003(\0132$.wwit.pr"
    "otobuf.VMMessage.RoutesEntry\022\r\n\005vcpus\030+ "
    "\001(\021\032-\n\013RoutesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value"
    "\030\002 \001(\t:\0028\001\"D\n\013instruction\022\016\n\006opcode\030\001 \001("
    "\t\022%\n\007details\030\002 \001(\0132\024.google.protobuf.Any"
    "B\003\370\001\001b\006proto3", 773);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vm_cn_interface.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fany_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_vm_5fcn_5finterface_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_vm_5fcn_5finterface_2eproto_once_);
void protobuf_AddDesc_vm_5fcn_5finterface_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_vm_5fcn_5finterface_2eproto_once_,
                 &protobuf_AddDesc_vm_5fcn_5finterface_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_vm_5fcn_5finterface_2eproto {
  StaticDescriptorInitializer_vm_5fcn_5finterface_2eproto() {
    protobuf_AddDesc_vm_5fcn_5finterface_2eproto();
  }
} static_descriptor_initializer_vm_5fcn_5finterface_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Disk::kBootFieldNumber;
const int Disk::kImageUuidFieldNumber;
const int Disk::kSizeFieldNumber;
const int Disk::kMediaFieldNumber;
const int Disk::kModelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Disk::Disk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_vm_5fcn_5finterface_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:wwit.protobuf.Disk)
}
Disk::Disk(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_vm_5fcn_5finterface_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:wwit.protobuf.Disk)
}

void Disk::InitAsDefaultInstance() {
}

Disk::Disk(const Disk& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:wwit.protobuf.Disk)
}

void Disk::SharedCtor() {
  image_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  media_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&boot_, 0, reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&boot_) + sizeof(size_));
  _cached_size_ = 0;
}

Disk::~Disk() {
  // @@protoc_insertion_point(destructor:wwit.protobuf.Disk)
  SharedDtor();
}

void Disk::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  image_uuid_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  media_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  model_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void Disk::ArenaDtor(void* object) {
  Disk* _this = reinterpret_cast< Disk* >(object);
  (void)_this;
}
void Disk::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Disk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Disk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Disk_descriptor_;
}

const Disk& Disk::default_instance() {
  protobuf_InitDefaults_vm_5fcn_5finterface_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Disk> Disk_default_instance_;

Disk* Disk::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Disk>(arena);
}

void Disk::Clear() {
// @@protoc_insertion_point(message_clear_start:wwit.protobuf.Disk)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Disk, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Disk*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(boot_, size_);
  image_uuid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  media_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  model_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());

#undef ZR_HELPER_
#undef ZR_

}

bool Disk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:wwit.protobuf.Disk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool boot = 2;
      case 2: {
        if (tag == 16) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boot_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_image_uuid;
        break;
      }

      // optional string image_uuid = 7;
      case 7: {
        if (tag == 58) {
         parse_image_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->image_uuid().data(), this->image_uuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "wwit.protobuf.Disk.image_uuid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_size;
        break;
      }

      // optional sint32 size = 9;
      case 9: {
        if (tag == 72) {
         parse_size:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_media;
        break;
      }

      // optional string media = 10;
      case 10: {
        if (tag == 82) {
         parse_media:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_media()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->media().data(), this->media().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "wwit.protobuf.Disk.media"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_model;
        break;
      }

      // optional string model = 11;
      case 11: {
        if (tag == 90) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "wwit.protobuf.Disk.model"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:wwit.protobuf.Disk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:wwit.protobuf.Disk)
  return false;
#undef DO_
}

void Disk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:wwit.protobuf.Disk)
  // optional bool boot = 2;
  if (this->boot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->boot(), output);
  }

  // optional string image_uuid = 7;
  if (this->image_uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_uuid().data(), this->image_uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "wwit.protobuf.Disk.image_uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->image_uuid(), output);
  }

  // optional sint32 size = 9;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(9, this->size(), output);
  }

  // optional string media = 10;
  if (this->media().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->media().data(), this->media().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "wwit.protobuf.Disk.media");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->media(), output);
  }

  // optional string model = 11;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "wwit.protobuf.Disk.model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->model(), output);
  }

  // @@protoc_insertion_point(serialize_end:wwit.protobuf.Disk)
}

::google::protobuf::uint8* Disk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:wwit.protobuf.Disk)
  // optional bool boot = 2;
  if (this->boot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->boot(), target);
  }

  // optional string image_uuid = 7;
  if (this->image_uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_uuid().data(), this->image_uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "wwit.protobuf.Disk.image_uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->image_uuid(), target);
  }

  // optional sint32 size = 9;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(9, this->size(), target);
  }

  // optional string media = 10;
  if (this->media().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->media().data(), this->media().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "wwit.protobuf.Disk.media");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->media(), target);
  }

  // optional string model = 11;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "wwit.protobuf.Disk.model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->model(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:wwit.protobuf.Disk)
  return target;
}

size_t Disk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wwit.protobuf.Disk)
  size_t total_size = 0;

  // optional bool boot = 2;
  if (this->boot() != 0) {
    total_size += 1 + 1;
  }

  // optional string image_uuid = 7;
  if (this->image_uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->image_uuid());
  }

  // optional sint32 size = 9;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->size());
  }

  // optional string media = 10;
  if (this->media().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->media());
  }

  // optional string model = 11;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Disk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:wwit.protobuf.Disk)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Disk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Disk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:wwit.protobuf.Disk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:wwit.protobuf.Disk)
    UnsafeMergeFrom(*source);
  }
}

void Disk::MergeFrom(const Disk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wwit.protobuf.Disk)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Disk::UnsafeMergeFrom(const Disk& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.boot() != 0) {
    set_boot(from.boot());
  }
  if (from.image_uuid().size() > 0) {
    set_image_uuid(from.image_uuid());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.media().size() > 0) {
    set_media(from.media());
  }
  if (from.model().size() > 0) {
    set_model(from.model());
  }
}

void Disk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:wwit.protobuf.Disk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Disk::CopyFrom(const Disk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wwit.protobuf.Disk)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Disk::IsInitialized() const {

  return true;
}

void Disk::Swap(Disk* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Disk temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void Disk::UnsafeArenaSwap(Disk* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Disk::InternalSwap(Disk* other) {
  std::swap(boot_, other->boot_);
  image_uuid_.Swap(&other->image_uuid_);
  std::swap(size_, other->size_);
  media_.Swap(&other->media_);
  model_.Swap(&other->model_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Disk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Disk_descriptor_;
  metadata.reflection = Disk_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Disk

// optional bool boot = 2;
void Disk::clear_boot() {
  boot_ = false;
}
bool Disk::boot() const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.Disk.boot)
  return boot_;
}
void Disk::set_boot(bool value) {
  
  boot_ = value;
  // @@protoc_insertion_point(field_set:wwit.protobuf.Disk.boot)
}

// optional string image_uuid = 7;
void Disk::clear_image_uuid() {
  image_uuid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Disk::image_uuid() const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.Disk.image_uuid)
  return image_uuid_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Disk::set_image_uuid(const ::std::string& value) {
  
  image_uuid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:wwit.protobuf.Disk.image_uuid)
}
void Disk::set_image_uuid(const char* value) {
  
  image_uuid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:wwit.protobuf.Disk.image_uuid)
}
void Disk::set_image_uuid(const char* value,
    size_t size) {
  
  image_uuid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:wwit.protobuf.Disk.image_uuid)
}
::std::string* Disk::mutable_image_uuid() {
  
  // @@protoc_insertion_point(field_mutable:wwit.protobuf.Disk.image_uuid)
  return image_uuid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Disk::release_image_uuid() {
  // @@protoc_insertion_point(field_release:wwit.protobuf.Disk.image_uuid)
  
  return image_uuid_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Disk::unsafe_arena_release_image_uuid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:wwit.protobuf.Disk.image_uuid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return image_uuid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Disk::set_allocated_image_uuid(::std::string* image_uuid) {
  if (image_uuid != NULL) {
    
  } else {
    
  }
  image_uuid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_uuid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:wwit.protobuf.Disk.image_uuid)
}
void Disk::unsafe_arena_set_allocated_image_uuid(
    ::std::string* image_uuid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (image_uuid != NULL) {
    
  } else {
    
  }
  image_uuid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      image_uuid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wwit.protobuf.Disk.image_uuid)
}

// optional sint32 size = 9;
void Disk::clear_size() {
  size_ = 0;
}
::google::protobuf::int32 Disk::size() const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.Disk.size)
  return size_;
}
void Disk::set_size(::google::protobuf::int32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:wwit.protobuf.Disk.size)
}

// optional string media = 10;
void Disk::clear_media() {
  media_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Disk::media() const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.Disk.media)
  return media_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Disk::set_media(const ::std::string& value) {
  
  media_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:wwit.protobuf.Disk.media)
}
void Disk::set_media(const char* value) {
  
  media_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:wwit.protobuf.Disk.media)
}
void Disk::set_media(const char* value,
    size_t size) {
  
  media_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:wwit.protobuf.Disk.media)
}
::std::string* Disk::mutable_media() {
  
  // @@protoc_insertion_point(field_mutable:wwit.protobuf.Disk.media)
  return media_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Disk::release_media() {
  // @@protoc_insertion_point(field_release:wwit.protobuf.Disk.media)
  
  return media_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Disk::unsafe_arena_release_media() {
  // @@protoc_insertion_point(field_unsafe_arena_release:wwit.protobuf.Disk.media)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return media_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Disk::set_allocated_media(::std::string* media) {
  if (media != NULL) {
    
  } else {
    
  }
  media_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), media,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:wwit.protobuf.Disk.media)
}
void Disk::unsafe_arena_set_allocated_media(
    ::std::string* media) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (media != NULL) {
    
  } else {
    
  }
  media_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      media, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wwit.protobuf.Disk.media)
}

// optional string model = 11;
void Disk::clear_model() {
  model_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Disk::model() const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.Disk.model)
  return model_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Disk::set_model(const ::std::string& value) {
  
  model_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:wwit.protobuf.Disk.model)
}
void Disk::set_model(const char* value) {
  
  model_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:wwit.protobuf.Disk.model)
}
void Disk::set_model(const char* value,
    size_t size) {
  
  model_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:wwit.protobuf.Disk.model)
}
::std::string* Disk::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:wwit.protobuf.Disk.model)
  return model_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Disk::release_model() {
  // @@protoc_insertion_point(field_release:wwit.protobuf.Disk.model)
  
  return model_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Disk::unsafe_arena_release_model() {
  // @@protoc_insertion_point(field_unsafe_arena_release:wwit.protobuf.Disk.model)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return model_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Disk::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:wwit.protobuf.Disk.model)
}
void Disk::unsafe_arena_set_allocated_model(
    ::std::string* model) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (model != NULL) {
    
  } else {
    
  }
  model_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      model, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wwit.protobuf.Disk.model)
}

inline const Disk* Disk::internal_default_instance() {
  return &Disk_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Nic::kBlockedOutgoingPortsFieldNumber;
const int Nic::kAllowedIpsFieldNumber;
const int Nic::kDhcpServerFieldNumber;
const int Nic::kGatewayFieldNumber;
const int Nic::kGatewaysFieldNumber;
const int Nic::kIpFieldNumber;
const int Nic::kIpsFieldNumber;
const int Nic::kModelFieldNumber;
const int Nic::kNicTagFieldNumber;
const int Nic::kPrimaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Nic::Nic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_vm_5fcn_5finterface_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:wwit.protobuf.Nic)
}
Nic::Nic(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  blocked_outgoing_ports_(arena),
  allowed_ips_(arena),
  gateways_(arena),
  ips_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_vm_5fcn_5finterface_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:wwit.protobuf.Nic)
}

void Nic::InitAsDefaultInstance() {
}

Nic::Nic(const Nic& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:wwit.protobuf.Nic)
}

void Nic::SharedCtor() {
  gateway_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nic_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&dhcp_server_, 0, reinterpret_cast<char*>(&primary_) -
    reinterpret_cast<char*>(&dhcp_server_) + sizeof(primary_));
  _cached_size_ = 0;
}

Nic::~Nic() {
  // @@protoc_insertion_point(destructor:wwit.protobuf.Nic)
  SharedDtor();
}

void Nic::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  gateway_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  ip_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  model_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  nic_tag_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void Nic::ArenaDtor(void* object) {
  Nic* _this = reinterpret_cast< Nic* >(object);
  (void)_this;
}
void Nic::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Nic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Nic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Nic_descriptor_;
}

const Nic& Nic::default_instance() {
  protobuf_InitDefaults_vm_5fcn_5finterface_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Nic> Nic_default_instance_;

Nic* Nic::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Nic>(arena);
}

void Nic::Clear() {
// @@protoc_insertion_point(message_clear_start:wwit.protobuf.Nic)
  dhcp_server_ = false;
  gateway_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ip_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  model_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  nic_tag_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  primary_ = false;
  blocked_outgoing_ports_.Clear();
  allowed_ips_.Clear();
  gateways_.Clear();
  ips_.Clear();
}

bool Nic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:wwit.protobuf.Nic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated sint32 blocked_outgoing_ports = 6;
      case 6: {
        if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_blocked_outgoing_ports())));
        } else if (tag == 48) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 50, input, this->mutable_blocked_outgoing_ports())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_allowed_ips;
        break;
      }

      // repeated string allowed_ips = 7;
      case 7: {
        if (tag == 58) {
         parse_allowed_ips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_allowed_ips()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->allowed_ips(this->allowed_ips_size() - 1).data(),
            this->allowed_ips(this->allowed_ips_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "wwit.protobuf.Nic.allowed_ips"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_allowed_ips;
        if (input->ExpectTag(64)) goto parse_dhcp_server;
        break;
      }

      // optional bool dhcp_server = 8;
      case 8: {
        if (tag == 64) {
         parse_dhcp_server:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dhcp_server_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_gateway;
        break;
      }

      // optional string gateway = 9;
      case 9: {
        if (tag == 74) {
         parse_gateway:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gateway()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gateway().data(), this->gateway().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "wwit.protobuf.Nic.gateway"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_gateways;
        break;
      }

      // repeated string gateways = 10;
      case 10: {
        if (tag == 82) {
         parse_gateways:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_gateways()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gateways(this->gateways_size() - 1).data(),
            this->gateways(this->gateways_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "wwit.protobuf.Nic.gateways"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_gateways;
        if (input->ExpectTag(98)) goto parse_ip;
        break;
      }

      // optional string ip = 12;
      case 12: {
        if (tag == 98) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "wwit.protobuf.Nic.ip"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_ips;
        break;
      }

      // repeated string ips = 13;
      case 13: {
        if (tag == 106) {
         parse_ips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ips()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ips(this->ips_size() - 1).data(),
            this->ips(this->ips_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "wwit.protobuf.Nic.ips"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_ips;
        if (input->ExpectTag(122)) goto parse_model;
        break;
      }

      // optional string model = 15;
      case 15: {
        if (tag == 122) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "wwit.protobuf.Nic.model"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_nic_tag;
        break;
      }

      // optional string nic_tag = 19;
      case 19: {
        if (tag == 154) {
         parse_nic_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nic_tag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nic_tag().data(), this->nic_tag().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "wwit.protobuf.Nic.nic_tag"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_primary;
        break;
      }

      // optional bool primary = 20;
      case 20: {
        if (tag == 160) {
         parse_primary:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &primary_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:wwit.protobuf.Nic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:wwit.protobuf.Nic)
  return false;
#undef DO_
}

void Nic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:wwit.protobuf.Nic)
  // repeated sint32 blocked_outgoing_ports = 6;
  if (this->blocked_outgoing_ports_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_blocked_outgoing_ports_cached_byte_size_);
  }
  for (int i = 0; i < this->blocked_outgoing_ports_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32NoTag(
      this->blocked_outgoing_ports(i), output);
  }

  // repeated string allowed_ips = 7;
  for (int i = 0; i < this->allowed_ips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->allowed_ips(i).data(), this->allowed_ips(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "wwit.protobuf.Nic.allowed_ips");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->allowed_ips(i), output);
  }

  // optional bool dhcp_server = 8;
  if (this->dhcp_server() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->dhcp_server(), output);
  }

  // optional string gateway = 9;
  if (this->gateway().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateway().data(), this->gateway().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "wwit.protobuf.Nic.gateway");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->gateway(), output);
  }

  // repeated string gateways = 10;
  for (int i = 0; i < this->gateways_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateways(i).data(), this->gateways(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "wwit.protobuf.Nic.gateways");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->gateways(i), output);
  }

  // optional string ip = 12;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "wwit.protobuf.Nic.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->ip(), output);
  }

  // repeated string ips = 13;
  for (int i = 0; i < this->ips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ips(i).data(), this->ips(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "wwit.protobuf.Nic.ips");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->ips(i), output);
  }

  // optional string model = 15;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "wwit.protobuf.Nic.model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->model(), output);
  }

  // optional string nic_tag = 19;
  if (this->nic_tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nic_tag().data(), this->nic_tag().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "wwit.protobuf.Nic.nic_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->nic_tag(), output);
  }

  // optional bool primary = 20;
  if (this->primary() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->primary(), output);
  }

  // @@protoc_insertion_point(serialize_end:wwit.protobuf.Nic)
}

::google::protobuf::uint8* Nic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:wwit.protobuf.Nic)
  // repeated sint32 blocked_outgoing_ports = 6;
  if (this->blocked_outgoing_ports_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _blocked_outgoing_ports_cached_byte_size_, target);
  }
  for (int i = 0; i < this->blocked_outgoing_ports_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32NoTagToArray(this->blocked_outgoing_ports(i), target);
  }

  // repeated string allowed_ips = 7;
  for (int i = 0; i < this->allowed_ips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->allowed_ips(i).data(), this->allowed_ips(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "wwit.protobuf.Nic.allowed_ips");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->allowed_ips(i), target);
  }

  // optional bool dhcp_server = 8;
  if (this->dhcp_server() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->dhcp_server(), target);
  }

  // optional string gateway = 9;
  if (this->gateway().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateway().data(), this->gateway().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "wwit.protobuf.Nic.gateway");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->gateway(), target);
  }

  // repeated string gateways = 10;
  for (int i = 0; i < this->gateways_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateways(i).data(), this->gateways(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "wwit.protobuf.Nic.gateways");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->gateways(i), target);
  }

  // optional string ip = 12;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "wwit.protobuf.Nic.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->ip(), target);
  }

  // repeated string ips = 13;
  for (int i = 0; i < this->ips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ips(i).data(), this->ips(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "wwit.protobuf.Nic.ips");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(13, this->ips(i), target);
  }

  // optional string model = 15;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "wwit.protobuf.Nic.model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->model(), target);
  }

  // optional string nic_tag = 19;
  if (this->nic_tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nic_tag().data(), this->nic_tag().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "wwit.protobuf.Nic.nic_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->nic_tag(), target);
  }

  // optional bool primary = 20;
  if (this->primary() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->primary(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:wwit.protobuf.Nic)
  return target;
}

size_t Nic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wwit.protobuf.Nic)
  size_t total_size = 0;

  // optional bool dhcp_server = 8;
  if (this->dhcp_server() != 0) {
    total_size += 1 + 1;
  }

  // optional string gateway = 9;
  if (this->gateway().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gateway());
  }

  // optional string ip = 12;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // optional string model = 15;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model());
  }

  // optional string nic_tag = 19;
  if (this->nic_tag().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nic_tag());
  }

  // optional bool primary = 20;
  if (this->primary() != 0) {
    total_size += 2 + 1;
  }

  // repeated sint32 blocked_outgoing_ports = 6;
  {
    size_t data_size = 0;
    unsigned int count = this->blocked_outgoing_ports_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->blocked_outgoing_ports(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _blocked_outgoing_ports_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string allowed_ips = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->allowed_ips_size());
  for (int i = 0; i < this->allowed_ips_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->allowed_ips(i));
  }

  // repeated string gateways = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->gateways_size());
  for (int i = 0; i < this->gateways_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->gateways(i));
  }

  // repeated string ips = 13;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ips_size());
  for (int i = 0; i < this->ips_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ips(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Nic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:wwit.protobuf.Nic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Nic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Nic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:wwit.protobuf.Nic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:wwit.protobuf.Nic)
    UnsafeMergeFrom(*source);
  }
}

void Nic::MergeFrom(const Nic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wwit.protobuf.Nic)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Nic::UnsafeMergeFrom(const Nic& from) {
  GOOGLE_DCHECK(&from != this);
  blocked_outgoing_ports_.UnsafeMergeFrom(from.blocked_outgoing_ports_);
  allowed_ips_.UnsafeMergeFrom(from.allowed_ips_);
  gateways_.UnsafeMergeFrom(from.gateways_);
  ips_.UnsafeMergeFrom(from.ips_);
  if (from.dhcp_server() != 0) {
    set_dhcp_server(from.dhcp_server());
  }
  if (from.gateway().size() > 0) {
    set_gateway(from.gateway());
  }
  if (from.ip().size() > 0) {
    set_ip(from.ip());
  }
  if (from.model().size() > 0) {
    set_model(from.model());
  }
  if (from.nic_tag().size() > 0) {
    set_nic_tag(from.nic_tag());
  }
  if (from.primary() != 0) {
    set_primary(from.primary());
  }
}

void Nic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:wwit.protobuf.Nic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Nic::CopyFrom(const Nic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wwit.protobuf.Nic)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Nic::IsInitialized() const {

  return true;
}

void Nic::Swap(Nic* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Nic temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void Nic::UnsafeArenaSwap(Nic* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Nic::InternalSwap(Nic* other) {
  blocked_outgoing_ports_.UnsafeArenaSwap(&other->blocked_outgoing_ports_);
  allowed_ips_.UnsafeArenaSwap(&other->allowed_ips_);
  std::swap(dhcp_server_, other->dhcp_server_);
  gateway_.Swap(&other->gateway_);
  gateways_.UnsafeArenaSwap(&other->gateways_);
  ip_.Swap(&other->ip_);
  ips_.UnsafeArenaSwap(&other->ips_);
  model_.Swap(&other->model_);
  nic_tag_.Swap(&other->nic_tag_);
  std::swap(primary_, other->primary_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Nic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Nic_descriptor_;
  metadata.reflection = Nic_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Nic

// repeated sint32 blocked_outgoing_ports = 6;
int Nic::blocked_outgoing_ports_size() const {
  return blocked_outgoing_ports_.size();
}
void Nic::clear_blocked_outgoing_ports() {
  blocked_outgoing_ports_.Clear();
}
::google::protobuf::int32 Nic::blocked_outgoing_ports(int index) const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.Nic.blocked_outgoing_ports)
  return blocked_outgoing_ports_.Get(index);
}
void Nic::set_blocked_outgoing_ports(int index, ::google::protobuf::int32 value) {
  blocked_outgoing_ports_.Set(index, value);
  // @@protoc_insertion_point(field_set:wwit.protobuf.Nic.blocked_outgoing_ports)
}
void Nic::add_blocked_outgoing_ports(::google::protobuf::int32 value) {
  blocked_outgoing_ports_.Add(value);
  // @@protoc_insertion_point(field_add:wwit.protobuf.Nic.blocked_outgoing_ports)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Nic::blocked_outgoing_ports() const {
  // @@protoc_insertion_point(field_list:wwit.protobuf.Nic.blocked_outgoing_ports)
  return blocked_outgoing_ports_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Nic::mutable_blocked_outgoing_ports() {
  // @@protoc_insertion_point(field_mutable_list:wwit.protobuf.Nic.blocked_outgoing_ports)
  return &blocked_outgoing_ports_;
}

// repeated string allowed_ips = 7;
int Nic::allowed_ips_size() const {
  return allowed_ips_.size();
}
void Nic::clear_allowed_ips() {
  allowed_ips_.Clear();
}
const ::std::string& Nic::allowed_ips(int index) const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.Nic.allowed_ips)
  return allowed_ips_.Get(index);
}
::std::string* Nic::mutable_allowed_ips(int index) {
  // @@protoc_insertion_point(field_mutable:wwit.protobuf.Nic.allowed_ips)
  return allowed_ips_.Mutable(index);
}
void Nic::set_allowed_ips(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:wwit.protobuf.Nic.allowed_ips)
  allowed_ips_.Mutable(index)->assign(value);
}
void Nic::set_allowed_ips(int index, const char* value) {
  allowed_ips_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:wwit.protobuf.Nic.allowed_ips)
}
void Nic::set_allowed_ips(int index, const char* value, size_t size) {
  allowed_ips_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:wwit.protobuf.Nic.allowed_ips)
}
::std::string* Nic::add_allowed_ips() {
  // @@protoc_insertion_point(field_add_mutable:wwit.protobuf.Nic.allowed_ips)
  return allowed_ips_.Add();
}
void Nic::add_allowed_ips(const ::std::string& value) {
  allowed_ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:wwit.protobuf.Nic.allowed_ips)
}
void Nic::add_allowed_ips(const char* value) {
  allowed_ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:wwit.protobuf.Nic.allowed_ips)
}
void Nic::add_allowed_ips(const char* value, size_t size) {
  allowed_ips_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:wwit.protobuf.Nic.allowed_ips)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Nic::allowed_ips() const {
  // @@protoc_insertion_point(field_list:wwit.protobuf.Nic.allowed_ips)
  return allowed_ips_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Nic::mutable_allowed_ips() {
  // @@protoc_insertion_point(field_mutable_list:wwit.protobuf.Nic.allowed_ips)
  return &allowed_ips_;
}

// optional bool dhcp_server = 8;
void Nic::clear_dhcp_server() {
  dhcp_server_ = false;
}
bool Nic::dhcp_server() const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.Nic.dhcp_server)
  return dhcp_server_;
}
void Nic::set_dhcp_server(bool value) {
  
  dhcp_server_ = value;
  // @@protoc_insertion_point(field_set:wwit.protobuf.Nic.dhcp_server)
}

// optional string gateway = 9;
void Nic::clear_gateway() {
  gateway_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Nic::gateway() const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.Nic.gateway)
  return gateway_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Nic::set_gateway(const ::std::string& value) {
  
  gateway_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:wwit.protobuf.Nic.gateway)
}
void Nic::set_gateway(const char* value) {
  
  gateway_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:wwit.protobuf.Nic.gateway)
}
void Nic::set_gateway(const char* value,
    size_t size) {
  
  gateway_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:wwit.protobuf.Nic.gateway)
}
::std::string* Nic::mutable_gateway() {
  
  // @@protoc_insertion_point(field_mutable:wwit.protobuf.Nic.gateway)
  return gateway_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Nic::release_gateway() {
  // @@protoc_insertion_point(field_release:wwit.protobuf.Nic.gateway)
  
  return gateway_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Nic::unsafe_arena_release_gateway() {
  // @@protoc_insertion_point(field_unsafe_arena_release:wwit.protobuf.Nic.gateway)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return gateway_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Nic::set_allocated_gateway(::std::string* gateway) {
  if (gateway != NULL) {
    
  } else {
    
  }
  gateway_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gateway,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:wwit.protobuf.Nic.gateway)
}
void Nic::unsafe_arena_set_allocated_gateway(
    ::std::string* gateway) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (gateway != NULL) {
    
  } else {
    
  }
  gateway_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      gateway, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wwit.protobuf.Nic.gateway)
}

// repeated string gateways = 10;
int Nic::gateways_size() const {
  return gateways_.size();
}
void Nic::clear_gateways() {
  gateways_.Clear();
}
const ::std::string& Nic::gateways(int index) const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.Nic.gateways)
  return gateways_.Get(index);
}
::std::string* Nic::mutable_gateways(int index) {
  // @@protoc_insertion_point(field_mutable:wwit.protobuf.Nic.gateways)
  return gateways_.Mutable(index);
}
void Nic::set_gateways(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:wwit.protobuf.Nic.gateways)
  gateways_.Mutable(index)->assign(value);
}
void Nic::set_gateways(int index, const char* value) {
  gateways_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:wwit.protobuf.Nic.gateways)
}
void Nic::set_gateways(int index, const char* value, size_t size) {
  gateways_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:wwit.protobuf.Nic.gateways)
}
::std::string* Nic::add_gateways() {
  // @@protoc_insertion_point(field_add_mutable:wwit.protobuf.Nic.gateways)
  return gateways_.Add();
}
void Nic::add_gateways(const ::std::string& value) {
  gateways_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:wwit.protobuf.Nic.gateways)
}
void Nic::add_gateways(const char* value) {
  gateways_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:wwit.protobuf.Nic.gateways)
}
void Nic::add_gateways(const char* value, size_t size) {
  gateways_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:wwit.protobuf.Nic.gateways)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Nic::gateways() const {
  // @@protoc_insertion_point(field_list:wwit.protobuf.Nic.gateways)
  return gateways_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Nic::mutable_gateways() {
  // @@protoc_insertion_point(field_mutable_list:wwit.protobuf.Nic.gateways)
  return &gateways_;
}

// optional string ip = 12;
void Nic::clear_ip() {
  ip_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Nic::ip() const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.Nic.ip)
  return ip_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Nic::set_ip(const ::std::string& value) {
  
  ip_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:wwit.protobuf.Nic.ip)
}
void Nic::set_ip(const char* value) {
  
  ip_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:wwit.protobuf.Nic.ip)
}
void Nic::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:wwit.protobuf.Nic.ip)
}
::std::string* Nic::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:wwit.protobuf.Nic.ip)
  return ip_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Nic::release_ip() {
  // @@protoc_insertion_point(field_release:wwit.protobuf.Nic.ip)
  
  return ip_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Nic::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:wwit.protobuf.Nic.ip)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return ip_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Nic::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:wwit.protobuf.Nic.ip)
}
void Nic::unsafe_arena_set_allocated_ip(
    ::std::string* ip) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ip, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wwit.protobuf.Nic.ip)
}

// repeated string ips = 13;
int Nic::ips_size() const {
  return ips_.size();
}
void Nic::clear_ips() {
  ips_.Clear();
}
const ::std::string& Nic::ips(int index) const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.Nic.ips)
  return ips_.Get(index);
}
::std::string* Nic::mutable_ips(int index) {
  // @@protoc_insertion_point(field_mutable:wwit.protobuf.Nic.ips)
  return ips_.Mutable(index);
}
void Nic::set_ips(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:wwit.protobuf.Nic.ips)
  ips_.Mutable(index)->assign(value);
}
void Nic::set_ips(int index, const char* value) {
  ips_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:wwit.protobuf.Nic.ips)
}
void Nic::set_ips(int index, const char* value, size_t size) {
  ips_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:wwit.protobuf.Nic.ips)
}
::std::string* Nic::add_ips() {
  // @@protoc_insertion_point(field_add_mutable:wwit.protobuf.Nic.ips)
  return ips_.Add();
}
void Nic::add_ips(const ::std::string& value) {
  ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:wwit.protobuf.Nic.ips)
}
void Nic::add_ips(const char* value) {
  ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:wwit.protobuf.Nic.ips)
}
void Nic::add_ips(const char* value, size_t size) {
  ips_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:wwit.protobuf.Nic.ips)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Nic::ips() const {
  // @@protoc_insertion_point(field_list:wwit.protobuf.Nic.ips)
  return ips_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Nic::mutable_ips() {
  // @@protoc_insertion_point(field_mutable_list:wwit.protobuf.Nic.ips)
  return &ips_;
}

// optional string model = 15;
void Nic::clear_model() {
  model_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Nic::model() const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.Nic.model)
  return model_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Nic::set_model(const ::std::string& value) {
  
  model_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:wwit.protobuf.Nic.model)
}
void Nic::set_model(const char* value) {
  
  model_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:wwit.protobuf.Nic.model)
}
void Nic::set_model(const char* value,
    size_t size) {
  
  model_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:wwit.protobuf.Nic.model)
}
::std::string* Nic::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:wwit.protobuf.Nic.model)
  return model_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Nic::release_model() {
  // @@protoc_insertion_point(field_release:wwit.protobuf.Nic.model)
  
  return model_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Nic::unsafe_arena_release_model() {
  // @@protoc_insertion_point(field_unsafe_arena_release:wwit.protobuf.Nic.model)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return model_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Nic::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:wwit.protobuf.Nic.model)
}
void Nic::unsafe_arena_set_allocated_model(
    ::std::string* model) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (model != NULL) {
    
  } else {
    
  }
  model_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      model, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wwit.protobuf.Nic.model)
}

// optional string nic_tag = 19;
void Nic::clear_nic_tag() {
  nic_tag_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Nic::nic_tag() const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.Nic.nic_tag)
  return nic_tag_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Nic::set_nic_tag(const ::std::string& value) {
  
  nic_tag_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:wwit.protobuf.Nic.nic_tag)
}
void Nic::set_nic_tag(const char* value) {
  
  nic_tag_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:wwit.protobuf.Nic.nic_tag)
}
void Nic::set_nic_tag(const char* value,
    size_t size) {
  
  nic_tag_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:wwit.protobuf.Nic.nic_tag)
}
::std::string* Nic::mutable_nic_tag() {
  
  // @@protoc_insertion_point(field_mutable:wwit.protobuf.Nic.nic_tag)
  return nic_tag_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Nic::release_nic_tag() {
  // @@protoc_insertion_point(field_release:wwit.protobuf.Nic.nic_tag)
  
  return nic_tag_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Nic::unsafe_arena_release_nic_tag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:wwit.protobuf.Nic.nic_tag)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return nic_tag_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Nic::set_allocated_nic_tag(::std::string* nic_tag) {
  if (nic_tag != NULL) {
    
  } else {
    
  }
  nic_tag_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nic_tag,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:wwit.protobuf.Nic.nic_tag)
}
void Nic::unsafe_arena_set_allocated_nic_tag(
    ::std::string* nic_tag) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (nic_tag != NULL) {
    
  } else {
    
  }
  nic_tag_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      nic_tag, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wwit.protobuf.Nic.nic_tag)
}

// optional bool primary = 20;
void Nic::clear_primary() {
  primary_ = false;
}
bool Nic::primary() const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.Nic.primary)
  return primary_;
}
void Nic::set_primary(bool value) {
  
  primary_ = value;
  // @@protoc_insertion_point(field_set:wwit.protobuf.Nic.primary)
}

inline const Nic* Nic::internal_default_instance() {
  return &Nic_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VMMessage::kAliasFieldNumber;
const int VMMessage::kArchiveOnDeleteFieldNumber;
const int VMMessage::kBrandFieldNumber;
const int VMMessage::kDisksFieldNumber;
const int VMMessage::kDomainFieldNumber;
const int VMMessage::kFirewallEnableFieldNumber;
const int VMMessage::kHostnameFieldNumber;
const int VMMessage::kNicsFieldNumber;
const int VMMessage::kRamFieldNumber;
const int VMMessage::kResolversFieldNumber;
const int VMMessage::kRoutesFieldNumber;
const int VMMessage::kVcpusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VMMessage::VMMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_vm_5fcn_5finterface_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:wwit.protobuf.VMMessage)
}
VMMessage::VMMessage(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  disks_(arena),
  nics_(arena),
  resolvers_(arena),
  routes_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_vm_5fcn_5finterface_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:wwit.protobuf.VMMessage)
}

void VMMessage::InitAsDefaultInstance() {
}

VMMessage::VMMessage(const VMMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:wwit.protobuf.VMMessage)
}

void VMMessage::SharedCtor() {
  routes_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  routes_.SetEntryDescriptor(
      &::wwit::protobuf::VMMessage_RoutesEntry_descriptor_);
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brand_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&archive_on_delete_, 0, reinterpret_cast<char*>(&vcpus_) -
    reinterpret_cast<char*>(&archive_on_delete_) + sizeof(vcpus_));
  _cached_size_ = 0;
}

VMMessage::~VMMessage() {
  // @@protoc_insertion_point(destructor:wwit.protobuf.VMMessage)
  SharedDtor();
}

void VMMessage::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  alias_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  brand_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  domain_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  hostname_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void VMMessage::ArenaDtor(void* object) {
  VMMessage* _this = reinterpret_cast< VMMessage* >(object);
  (void)_this;
}
void VMMessage::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void VMMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VMMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VMMessage_descriptor_;
}

const VMMessage& VMMessage::default_instance() {
  protobuf_InitDefaults_vm_5fcn_5finterface_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<VMMessage> VMMessage_default_instance_;

VMMessage* VMMessage::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<VMMessage>(arena);
}

void VMMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:wwit.protobuf.VMMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(VMMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VMMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(archive_on_delete_, firewall_enable_);
  alias_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  brand_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  domain_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  hostname_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ZR_(ram_, vcpus_);

#undef ZR_HELPER_
#undef ZR_

  disks_.Clear();
  nics_.Clear();
  resolvers_.Clear();
  routes_.Clear();
}

bool VMMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:wwit.protobuf.VMMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string alias = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alias()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->alias().data(), this->alias().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "wwit.protobuf.VMMessage.alias"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_archive_on_delete;
        break;
      }

      // optional bool archive_on_delete = 2;
      case 2: {
        if (tag == 16) {
         parse_archive_on_delete:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &archive_on_delete_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_brand;
        break;
      }

      // optional string brand = 5;
      case 5: {
        if (tag == 42) {
         parse_brand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brand()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->brand().data(), this->brand().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "wwit.protobuf.VMMessage.brand"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_disks;
        break;
      }

      // repeated .wwit.protobuf.Disk disks = 9;
      case 9: {
        if (tag == 74) {
         parse_disks:
          DO_(input->IncrementRecursionDepth());
         parse_loop_disks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_disks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_disks;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(98)) goto parse_domain;
        break;
      }

      // optional string domain = 12;
      case 12: {
        if (tag == 98) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "wwit.protobuf.VMMessage.domain"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_firewall_enable;
        break;
      }

      // optional bool firewall_enable = 14;
      case 14: {
        if (tag == 112) {
         parse_firewall_enable:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &firewall_enable_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_hostname;
        break;
      }

      // optional string hostname = 16;
      case 16: {
        if (tag == 130) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "wwit.protobuf.VMMessage.hostname"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_nics;
        break;
      }

      // repeated .wwit.protobuf.Nic nics = 27;
      case 27: {
        if (tag == 218) {
         parse_nics:
          DO_(input->IncrementRecursionDepth());
         parse_loop_nics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_nics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_loop_nics;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(288)) goto parse_ram;
        break;
      }

      // optional sint32 ram = 36;
      case 36: {
        if (tag == 288) {
         parse_ram:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &ram_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(298)) goto parse_resolvers;
        break;
      }

      // repeated string resolvers = 37;
      case 37: {
        if (tag == 298) {
         parse_resolvers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_resolvers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->resolvers(this->resolvers_size() - 1).data(),
            this->resolvers(this->resolvers_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "wwit.protobuf.VMMessage.resolvers"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(298)) goto parse_resolvers;
        if (input->ExpectTag(306)) goto parse_routes;
        break;
      }

      // map<string, string> routes = 38;
      case 38: {
        if (tag == 306) {
         parse_routes:
          DO_(input->IncrementRecursionDepth());
         parse_loop_routes:
          VMMessage_RoutesEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&routes_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "wwit.protobuf.VMMessage.RoutesEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "wwit.protobuf.VMMessage.RoutesEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(306)) goto parse_loop_routes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(344)) goto parse_vcpus;
        break;
      }

      // optional sint32 vcpus = 43;
      case 43: {
        if (tag == 344) {
         parse_vcpus:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &vcpus_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:wwit.protobuf.VMMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:wwit.protobuf.VMMessage)
  return false;
#undef DO_
}

void VMMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:wwit.protobuf.VMMessage)
  // optional string alias = 1;
  if (this->alias().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "wwit.protobuf.VMMessage.alias");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->alias(), output);
  }

  // optional bool archive_on_delete = 2;
  if (this->archive_on_delete() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->archive_on_delete(), output);
  }

  // optional string brand = 5;
  if (this->brand().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brand().data(), this->brand().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "wwit.protobuf.VMMessage.brand");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->brand(), output);
  }

  // repeated .wwit.protobuf.Disk disks = 9;
  for (unsigned int i = 0, n = this->disks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->disks(i), output);
  }

  // optional string domain = 12;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "wwit.protobuf.VMMessage.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->domain(), output);
  }

  // optional bool firewall_enable = 14;
  if (this->firewall_enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->firewall_enable(), output);
  }

  // optional string hostname = 16;
  if (this->hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "wwit.protobuf.VMMessage.hostname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->hostname(), output);
  }

  // repeated .wwit.protobuf.Nic nics = 27;
  for (unsigned int i = 0, n = this->nics_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->nics(i), output);
  }

  // optional sint32 ram = 36;
  if (this->ram() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(36, this->ram(), output);
  }

  // repeated string resolvers = 37;
  for (int i = 0; i < this->resolvers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resolvers(i).data(), this->resolvers(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "wwit.protobuf.VMMessage.resolvers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      37, this->resolvers(i), output);
  }

  // map<string, string> routes = 38;
  if (!this->routes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "wwit.protobuf.VMMessage.RoutesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "wwit.protobuf.VMMessage.RoutesEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->routes().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->routes().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->routes().begin();
          it != this->routes().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<VMMessage_RoutesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(routes_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            38, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<VMMessage_RoutesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->routes().begin();
          it != this->routes().end(); ++it) {
        entry.reset(routes_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            38, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional sint32 vcpus = 43;
  if (this->vcpus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(43, this->vcpus(), output);
  }

  // @@protoc_insertion_point(serialize_end:wwit.protobuf.VMMessage)
}

::google::protobuf::uint8* VMMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:wwit.protobuf.VMMessage)
  // optional string alias = 1;
  if (this->alias().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "wwit.protobuf.VMMessage.alias");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->alias(), target);
  }

  // optional bool archive_on_delete = 2;
  if (this->archive_on_delete() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->archive_on_delete(), target);
  }

  // optional string brand = 5;
  if (this->brand().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brand().data(), this->brand().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "wwit.protobuf.VMMessage.brand");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->brand(), target);
  }

  // repeated .wwit.protobuf.Disk disks = 9;
  for (unsigned int i = 0, n = this->disks_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->disks(i), false, target);
  }

  // optional string domain = 12;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "wwit.protobuf.VMMessage.domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->domain(), target);
  }

  // optional bool firewall_enable = 14;
  if (this->firewall_enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->firewall_enable(), target);
  }

  // optional string hostname = 16;
  if (this->hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "wwit.protobuf.VMMessage.hostname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->hostname(), target);
  }

  // repeated .wwit.protobuf.Nic nics = 27;
  for (unsigned int i = 0, n = this->nics_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        27, this->nics(i), false, target);
  }

  // optional sint32 ram = 36;
  if (this->ram() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(36, this->ram(), target);
  }

  // repeated string resolvers = 37;
  for (int i = 0; i < this->resolvers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resolvers(i).data(), this->resolvers(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "wwit.protobuf.VMMessage.resolvers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(37, this->resolvers(i), target);
  }

  // map<string, string> routes = 38;
  if (!this->routes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "wwit.protobuf.VMMessage.RoutesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "wwit.protobuf.VMMessage.RoutesEntry.value");
      }
    };

    if (deterministic &&
        this->routes().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->routes().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->routes().begin();
          it != this->routes().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<VMMessage_RoutesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(routes_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       38, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<VMMessage_RoutesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->routes().begin();
          it != this->routes().end(); ++it) {
        entry.reset(routes_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       38, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional sint32 vcpus = 43;
  if (this->vcpus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(43, this->vcpus(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:wwit.protobuf.VMMessage)
  return target;
}

size_t VMMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wwit.protobuf.VMMessage)
  size_t total_size = 0;

  // optional string alias = 1;
  if (this->alias().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->alias());
  }

  // optional bool archive_on_delete = 2;
  if (this->archive_on_delete() != 0) {
    total_size += 1 + 1;
  }

  // optional string brand = 5;
  if (this->brand().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->brand());
  }

  // optional string domain = 12;
  if (this->domain().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->domain());
  }

  // optional bool firewall_enable = 14;
  if (this->firewall_enable() != 0) {
    total_size += 1 + 1;
  }

  // optional string hostname = 16;
  if (this->hostname().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hostname());
  }

  // optional sint32 ram = 36;
  if (this->ram() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->ram());
  }

  // optional sint32 vcpus = 43;
  if (this->vcpus() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->vcpus());
  }

  // repeated .wwit.protobuf.Disk disks = 9;
  {
    unsigned int count = this->disks_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->disks(i));
    }
  }

  // repeated .wwit.protobuf.Nic nics = 27;
  {
    unsigned int count = this->nics_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nics(i));
    }
  }

  // repeated string resolvers = 37;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->resolvers_size());
  for (int i = 0; i < this->resolvers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->resolvers(i));
  }

  // map<string, string> routes = 38;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->routes_size());
  {
    ::google::protobuf::scoped_ptr<VMMessage_RoutesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->routes().begin();
        it != this->routes().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(routes_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VMMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:wwit.protobuf.VMMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VMMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VMMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:wwit.protobuf.VMMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:wwit.protobuf.VMMessage)
    UnsafeMergeFrom(*source);
  }
}

void VMMessage::MergeFrom(const VMMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wwit.protobuf.VMMessage)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void VMMessage::UnsafeMergeFrom(const VMMessage& from) {
  GOOGLE_DCHECK(&from != this);
  disks_.MergeFrom(from.disks_);
  nics_.MergeFrom(from.nics_);
  resolvers_.UnsafeMergeFrom(from.resolvers_);
  routes_.MergeFrom(from.routes_);
  if (from.alias().size() > 0) {
    set_alias(from.alias());
  }
  if (from.archive_on_delete() != 0) {
    set_archive_on_delete(from.archive_on_delete());
  }
  if (from.brand().size() > 0) {
    set_brand(from.brand());
  }
  if (from.domain().size() > 0) {
    set_domain(from.domain());
  }
  if (from.firewall_enable() != 0) {
    set_firewall_enable(from.firewall_enable());
  }
  if (from.hostname().size() > 0) {
    set_hostname(from.hostname());
  }
  if (from.ram() != 0) {
    set_ram(from.ram());
  }
  if (from.vcpus() != 0) {
    set_vcpus(from.vcpus());
  }
}

void VMMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:wwit.protobuf.VMMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VMMessage::CopyFrom(const VMMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wwit.protobuf.VMMessage)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool VMMessage::IsInitialized() const {

  return true;
}

void VMMessage::Swap(VMMessage* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    VMMessage temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void VMMessage::UnsafeArenaSwap(VMMessage* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void VMMessage::InternalSwap(VMMessage* other) {
  alias_.Swap(&other->alias_);
  std::swap(archive_on_delete_, other->archive_on_delete_);
  brand_.Swap(&other->brand_);
  disks_.UnsafeArenaSwap(&other->disks_);
  domain_.Swap(&other->domain_);
  std::swap(firewall_enable_, other->firewall_enable_);
  hostname_.Swap(&other->hostname_);
  nics_.UnsafeArenaSwap(&other->nics_);
  std::swap(ram_, other->ram_);
  resolvers_.UnsafeArenaSwap(&other->resolvers_);
  routes_.Swap(&other->routes_);
  std::swap(vcpus_, other->vcpus_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VMMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VMMessage_descriptor_;
  metadata.reflection = VMMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VMMessage

// optional string alias = 1;
void VMMessage::clear_alias() {
  alias_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& VMMessage::alias() const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.VMMessage.alias)
  return alias_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VMMessage::set_alias(const ::std::string& value) {
  
  alias_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:wwit.protobuf.VMMessage.alias)
}
void VMMessage::set_alias(const char* value) {
  
  alias_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:wwit.protobuf.VMMessage.alias)
}
void VMMessage::set_alias(const char* value,
    size_t size) {
  
  alias_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:wwit.protobuf.VMMessage.alias)
}
::std::string* VMMessage::mutable_alias() {
  
  // @@protoc_insertion_point(field_mutable:wwit.protobuf.VMMessage.alias)
  return alias_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VMMessage::release_alias() {
  // @@protoc_insertion_point(field_release:wwit.protobuf.VMMessage.alias)
  
  return alias_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VMMessage::unsafe_arena_release_alias() {
  // @@protoc_insertion_point(field_unsafe_arena_release:wwit.protobuf.VMMessage.alias)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return alias_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void VMMessage::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    
  } else {
    
  }
  alias_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:wwit.protobuf.VMMessage.alias)
}
void VMMessage::unsafe_arena_set_allocated_alias(
    ::std::string* alias) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (alias != NULL) {
    
  } else {
    
  }
  alias_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      alias, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wwit.protobuf.VMMessage.alias)
}

// optional bool archive_on_delete = 2;
void VMMessage::clear_archive_on_delete() {
  archive_on_delete_ = false;
}
bool VMMessage::archive_on_delete() const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.VMMessage.archive_on_delete)
  return archive_on_delete_;
}
void VMMessage::set_archive_on_delete(bool value) {
  
  archive_on_delete_ = value;
  // @@protoc_insertion_point(field_set:wwit.protobuf.VMMessage.archive_on_delete)
}

// optional string brand = 5;
void VMMessage::clear_brand() {
  brand_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& VMMessage::brand() const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.VMMessage.brand)
  return brand_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VMMessage::set_brand(const ::std::string& value) {
  
  brand_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:wwit.protobuf.VMMessage.brand)
}
void VMMessage::set_brand(const char* value) {
  
  brand_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:wwit.protobuf.VMMessage.brand)
}
void VMMessage::set_brand(const char* value,
    size_t size) {
  
  brand_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:wwit.protobuf.VMMessage.brand)
}
::std::string* VMMessage::mutable_brand() {
  
  // @@protoc_insertion_point(field_mutable:wwit.protobuf.VMMessage.brand)
  return brand_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VMMessage::release_brand() {
  // @@protoc_insertion_point(field_release:wwit.protobuf.VMMessage.brand)
  
  return brand_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VMMessage::unsafe_arena_release_brand() {
  // @@protoc_insertion_point(field_unsafe_arena_release:wwit.protobuf.VMMessage.brand)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return brand_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void VMMessage::set_allocated_brand(::std::string* brand) {
  if (brand != NULL) {
    
  } else {
    
  }
  brand_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brand,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:wwit.protobuf.VMMessage.brand)
}
void VMMessage::unsafe_arena_set_allocated_brand(
    ::std::string* brand) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (brand != NULL) {
    
  } else {
    
  }
  brand_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      brand, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wwit.protobuf.VMMessage.brand)
}

// repeated .wwit.protobuf.Disk disks = 9;
int VMMessage::disks_size() const {
  return disks_.size();
}
void VMMessage::clear_disks() {
  disks_.Clear();
}
const ::wwit::protobuf::Disk& VMMessage::disks(int index) const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.VMMessage.disks)
  return disks_.Get(index);
}
::wwit::protobuf::Disk* VMMessage::mutable_disks(int index) {
  // @@protoc_insertion_point(field_mutable:wwit.protobuf.VMMessage.disks)
  return disks_.Mutable(index);
}
::wwit::protobuf::Disk* VMMessage::add_disks() {
  // @@protoc_insertion_point(field_add:wwit.protobuf.VMMessage.disks)
  return disks_.Add();
}
::google::protobuf::RepeatedPtrField< ::wwit::protobuf::Disk >*
VMMessage::mutable_disks() {
  // @@protoc_insertion_point(field_mutable_list:wwit.protobuf.VMMessage.disks)
  return &disks_;
}
const ::google::protobuf::RepeatedPtrField< ::wwit::protobuf::Disk >&
VMMessage::disks() const {
  // @@protoc_insertion_point(field_list:wwit.protobuf.VMMessage.disks)
  return disks_;
}

// optional string domain = 12;
void VMMessage::clear_domain() {
  domain_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& VMMessage::domain() const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.VMMessage.domain)
  return domain_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VMMessage::set_domain(const ::std::string& value) {
  
  domain_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:wwit.protobuf.VMMessage.domain)
}
void VMMessage::set_domain(const char* value) {
  
  domain_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:wwit.protobuf.VMMessage.domain)
}
void VMMessage::set_domain(const char* value,
    size_t size) {
  
  domain_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:wwit.protobuf.VMMessage.domain)
}
::std::string* VMMessage::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:wwit.protobuf.VMMessage.domain)
  return domain_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VMMessage::release_domain() {
  // @@protoc_insertion_point(field_release:wwit.protobuf.VMMessage.domain)
  
  return domain_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VMMessage::unsafe_arena_release_domain() {
  // @@protoc_insertion_point(field_unsafe_arena_release:wwit.protobuf.VMMessage.domain)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return domain_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void VMMessage::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    
  } else {
    
  }
  domain_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:wwit.protobuf.VMMessage.domain)
}
void VMMessage::unsafe_arena_set_allocated_domain(
    ::std::string* domain) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (domain != NULL) {
    
  } else {
    
  }
  domain_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      domain, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wwit.protobuf.VMMessage.domain)
}

// optional bool firewall_enable = 14;
void VMMessage::clear_firewall_enable() {
  firewall_enable_ = false;
}
bool VMMessage::firewall_enable() const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.VMMessage.firewall_enable)
  return firewall_enable_;
}
void VMMessage::set_firewall_enable(bool value) {
  
  firewall_enable_ = value;
  // @@protoc_insertion_point(field_set:wwit.protobuf.VMMessage.firewall_enable)
}

// optional string hostname = 16;
void VMMessage::clear_hostname() {
  hostname_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& VMMessage::hostname() const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.VMMessage.hostname)
  return hostname_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VMMessage::set_hostname(const ::std::string& value) {
  
  hostname_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:wwit.protobuf.VMMessage.hostname)
}
void VMMessage::set_hostname(const char* value) {
  
  hostname_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:wwit.protobuf.VMMessage.hostname)
}
void VMMessage::set_hostname(const char* value,
    size_t size) {
  
  hostname_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:wwit.protobuf.VMMessage.hostname)
}
::std::string* VMMessage::mutable_hostname() {
  
  // @@protoc_insertion_point(field_mutable:wwit.protobuf.VMMessage.hostname)
  return hostname_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VMMessage::release_hostname() {
  // @@protoc_insertion_point(field_release:wwit.protobuf.VMMessage.hostname)
  
  return hostname_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VMMessage::unsafe_arena_release_hostname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:wwit.protobuf.VMMessage.hostname)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return hostname_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void VMMessage::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    
  } else {
    
  }
  hostname_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:wwit.protobuf.VMMessage.hostname)
}
void VMMessage::unsafe_arena_set_allocated_hostname(
    ::std::string* hostname) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (hostname != NULL) {
    
  } else {
    
  }
  hostname_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      hostname, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wwit.protobuf.VMMessage.hostname)
}

// repeated .wwit.protobuf.Nic nics = 27;
int VMMessage::nics_size() const {
  return nics_.size();
}
void VMMessage::clear_nics() {
  nics_.Clear();
}
const ::wwit::protobuf::Nic& VMMessage::nics(int index) const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.VMMessage.nics)
  return nics_.Get(index);
}
::wwit::protobuf::Nic* VMMessage::mutable_nics(int index) {
  // @@protoc_insertion_point(field_mutable:wwit.protobuf.VMMessage.nics)
  return nics_.Mutable(index);
}
::wwit::protobuf::Nic* VMMessage::add_nics() {
  // @@protoc_insertion_point(field_add:wwit.protobuf.VMMessage.nics)
  return nics_.Add();
}
::google::protobuf::RepeatedPtrField< ::wwit::protobuf::Nic >*
VMMessage::mutable_nics() {
  // @@protoc_insertion_point(field_mutable_list:wwit.protobuf.VMMessage.nics)
  return &nics_;
}
const ::google::protobuf::RepeatedPtrField< ::wwit::protobuf::Nic >&
VMMessage::nics() const {
  // @@protoc_insertion_point(field_list:wwit.protobuf.VMMessage.nics)
  return nics_;
}

// optional sint32 ram = 36;
void VMMessage::clear_ram() {
  ram_ = 0;
}
::google::protobuf::int32 VMMessage::ram() const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.VMMessage.ram)
  return ram_;
}
void VMMessage::set_ram(::google::protobuf::int32 value) {
  
  ram_ = value;
  // @@protoc_insertion_point(field_set:wwit.protobuf.VMMessage.ram)
}

// repeated string resolvers = 37;
int VMMessage::resolvers_size() const {
  return resolvers_.size();
}
void VMMessage::clear_resolvers() {
  resolvers_.Clear();
}
const ::std::string& VMMessage::resolvers(int index) const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.VMMessage.resolvers)
  return resolvers_.Get(index);
}
::std::string* VMMessage::mutable_resolvers(int index) {
  // @@protoc_insertion_point(field_mutable:wwit.protobuf.VMMessage.resolvers)
  return resolvers_.Mutable(index);
}
void VMMessage::set_resolvers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:wwit.protobuf.VMMessage.resolvers)
  resolvers_.Mutable(index)->assign(value);
}
void VMMessage::set_resolvers(int index, const char* value) {
  resolvers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:wwit.protobuf.VMMessage.resolvers)
}
void VMMessage::set_resolvers(int index, const char* value, size_t size) {
  resolvers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:wwit.protobuf.VMMessage.resolvers)
}
::std::string* VMMessage::add_resolvers() {
  // @@protoc_insertion_point(field_add_mutable:wwit.protobuf.VMMessage.resolvers)
  return resolvers_.Add();
}
void VMMessage::add_resolvers(const ::std::string& value) {
  resolvers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:wwit.protobuf.VMMessage.resolvers)
}
void VMMessage::add_resolvers(const char* value) {
  resolvers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:wwit.protobuf.VMMessage.resolvers)
}
void VMMessage::add_resolvers(const char* value, size_t size) {
  resolvers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:wwit.protobuf.VMMessage.resolvers)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
VMMessage::resolvers() const {
  // @@protoc_insertion_point(field_list:wwit.protobuf.VMMessage.resolvers)
  return resolvers_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
VMMessage::mutable_resolvers() {
  // @@protoc_insertion_point(field_mutable_list:wwit.protobuf.VMMessage.resolvers)
  return &resolvers_;
}

// map<string, string> routes = 38;
int VMMessage::routes_size() const {
  return routes_.size();
}
void VMMessage::clear_routes() {
  routes_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
VMMessage::routes() const {
  // @@protoc_insertion_point(field_map:wwit.protobuf.VMMessage.routes)
  return routes_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
VMMessage::mutable_routes() {
  // @@protoc_insertion_point(field_mutable_map:wwit.protobuf.VMMessage.routes)
  return routes_.MutableMap();
}

// optional sint32 vcpus = 43;
void VMMessage::clear_vcpus() {
  vcpus_ = 0;
}
::google::protobuf::int32 VMMessage::vcpus() const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.VMMessage.vcpus)
  return vcpus_;
}
void VMMessage::set_vcpus(::google::protobuf::int32 value) {
  
  vcpus_ = value;
  // @@protoc_insertion_point(field_set:wwit.protobuf.VMMessage.vcpus)
}

inline const VMMessage* VMMessage::internal_default_instance() {
  return &VMMessage_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void instruction::_slow_mutable_details() {
  details_ = ::google::protobuf::Arena::Create< ::google::protobuf::Any >(
      GetArenaNoVirtual());
}
::google::protobuf::Any* instruction::_slow_release_details() {
  if (details_ == NULL) {
    return NULL;
  } else {
    ::google::protobuf::Any* temp = new ::google::protobuf::Any(*details_);
    details_ = NULL;
    return temp;
  }
}
::google::protobuf::Any* instruction::unsafe_arena_release_details() {
  // @@protoc_insertion_point(field_unsafe_arena_release:wwit.protobuf.instruction.details)
  
  ::google::protobuf::Any* temp = details_;
  details_ = NULL;
  return temp;
}
void instruction::unsafe_arena_set_allocated_details(
    ::google::protobuf::Any* details) {
  if (GetArenaNoVirtual() == NULL) {
    delete details_;
  }
  details_ = details;
  if (details) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wwit.protobuf.instruction.details)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int instruction::kOpcodeFieldNumber;
const int instruction::kDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

instruction::instruction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_vm_5fcn_5finterface_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:wwit.protobuf.instruction)
}
instruction::instruction(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_vm_5fcn_5finterface_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:wwit.protobuf.instruction)
}

void instruction::InitAsDefaultInstance() {
  details_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}

instruction::instruction(const instruction& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:wwit.protobuf.instruction)
}

void instruction::SharedCtor() {
  opcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  details_ = NULL;
  _cached_size_ = 0;
}

instruction::~instruction() {
  // @@protoc_insertion_point(destructor:wwit.protobuf.instruction)
  SharedDtor();
}

void instruction::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  opcode_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != &instruction_default_instance_.get()) {
    delete details_;
  }
}

void instruction::ArenaDtor(void* object) {
  instruction* _this = reinterpret_cast< instruction* >(object);
  (void)_this;
}
void instruction::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void instruction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* instruction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return instruction_descriptor_;
}

const instruction& instruction::default_instance() {
  protobuf_InitDefaults_vm_5fcn_5finterface_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<instruction> instruction_default_instance_;

instruction* instruction::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<instruction>(arena);
}

void instruction::Clear() {
// @@protoc_insertion_point(message_clear_start:wwit.protobuf.instruction)
  opcode_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && details_ != NULL) delete details_;
  details_ = NULL;
}

bool instruction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:wwit.protobuf.instruction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string opcode = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opcode()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->opcode().data(), this->opcode().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "wwit.protobuf.instruction.opcode"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_details;
        break;
      }

      // optional .google.protobuf.Any details = 2;
      case 2: {
        if (tag == 18) {
         parse_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_details()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:wwit.protobuf.instruction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:wwit.protobuf.instruction)
  return false;
#undef DO_
}

void instruction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:wwit.protobuf.instruction)
  // optional string opcode = 1;
  if (this->opcode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->opcode().data(), this->opcode().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "wwit.protobuf.instruction.opcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->opcode(), output);
  }

  // optional .google.protobuf.Any details = 2;
  if (this->has_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->details_, output);
  }

  // @@protoc_insertion_point(serialize_end:wwit.protobuf.instruction)
}

::google::protobuf::uint8* instruction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:wwit.protobuf.instruction)
  // optional string opcode = 1;
  if (this->opcode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->opcode().data(), this->opcode().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "wwit.protobuf.instruction.opcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->opcode(), target);
  }

  // optional .google.protobuf.Any details = 2;
  if (this->has_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->details_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:wwit.protobuf.instruction)
  return target;
}

size_t instruction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wwit.protobuf.instruction)
  size_t total_size = 0;

  // optional string opcode = 1;
  if (this->opcode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->opcode());
  }

  // optional .google.protobuf.Any details = 2;
  if (this->has_details()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->details_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void instruction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:wwit.protobuf.instruction)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const instruction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const instruction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:wwit.protobuf.instruction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:wwit.protobuf.instruction)
    UnsafeMergeFrom(*source);
  }
}

void instruction::MergeFrom(const instruction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wwit.protobuf.instruction)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void instruction::UnsafeMergeFrom(const instruction& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.opcode().size() > 0) {
    set_opcode(from.opcode());
  }
  if (from.has_details()) {
    mutable_details()->::google::protobuf::Any::MergeFrom(from.details());
  }
}

void instruction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:wwit.protobuf.instruction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void instruction::CopyFrom(const instruction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wwit.protobuf.instruction)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool instruction::IsInitialized() const {

  return true;
}

void instruction::Swap(instruction* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    instruction temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void instruction::UnsafeArenaSwap(instruction* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void instruction::InternalSwap(instruction* other) {
  opcode_.Swap(&other->opcode_);
  std::swap(details_, other->details_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata instruction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = instruction_descriptor_;
  metadata.reflection = instruction_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// instruction

// optional string opcode = 1;
void instruction::clear_opcode() {
  opcode_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& instruction::opcode() const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.instruction.opcode)
  return opcode_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void instruction::set_opcode(const ::std::string& value) {
  
  opcode_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:wwit.protobuf.instruction.opcode)
}
void instruction::set_opcode(const char* value) {
  
  opcode_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:wwit.protobuf.instruction.opcode)
}
void instruction::set_opcode(const char* value,
    size_t size) {
  
  opcode_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:wwit.protobuf.instruction.opcode)
}
::std::string* instruction::mutable_opcode() {
  
  // @@protoc_insertion_point(field_mutable:wwit.protobuf.instruction.opcode)
  return opcode_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* instruction::release_opcode() {
  // @@protoc_insertion_point(field_release:wwit.protobuf.instruction.opcode)
  
  return opcode_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* instruction::unsafe_arena_release_opcode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:wwit.protobuf.instruction.opcode)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return opcode_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void instruction::set_allocated_opcode(::std::string* opcode) {
  if (opcode != NULL) {
    
  } else {
    
  }
  opcode_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), opcode,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:wwit.protobuf.instruction.opcode)
}
void instruction::unsafe_arena_set_allocated_opcode(
    ::std::string* opcode) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (opcode != NULL) {
    
  } else {
    
  }
  opcode_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      opcode, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wwit.protobuf.instruction.opcode)
}

// optional .google.protobuf.Any details = 2;
bool instruction::has_details() const {
  return this != internal_default_instance() && details_ != NULL;
}
void instruction::clear_details() {
  if (GetArenaNoVirtual() == NULL && details_ != NULL) delete details_;
  details_ = NULL;
}
const ::google::protobuf::Any& instruction::details() const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.instruction.details)
  return details_ != NULL ? *details_
                         : *::google::protobuf::Any::internal_default_instance();
}
::google::protobuf::Any* instruction::mutable_details() {
  
  if (details_ == NULL) {
    _slow_mutable_details();
  }
  // @@protoc_insertion_point(field_mutable:wwit.protobuf.instruction.details)
  return details_;
}
::google::protobuf::Any* instruction::release_details() {
  // @@protoc_insertion_point(field_release:wwit.protobuf.instruction.details)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_details();
  } else {
    ::google::protobuf::Any* temp = details_;
    details_ = NULL;
    return temp;
  }
}
 void instruction::set_allocated_details(::google::protobuf::Any* details) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete details_;
  }
  if (details != NULL) {
    if (message_arena != NULL) {
      message_arena->Own(details);
    }
  }
  details_ = details;
  if (details) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:wwit.protobuf.instruction.details)
}

inline const instruction* instruction::internal_default_instance() {
  return &instruction_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace wwit

// @@protoc_insertion_point(global_scope)
