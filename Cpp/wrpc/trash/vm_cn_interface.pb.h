// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vm_cn_interface.proto

#ifndef PROTOBUF_vm_5fcn_5finterface_2eproto__INCLUDED
#define PROTOBUF_vm_5fcn_5finterface_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)

namespace wwit {
namespace protobuf {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_vm_5fcn_5finterface_2eproto();
void protobuf_InitDefaults_vm_5fcn_5finterface_2eproto();
void protobuf_AssignDesc_vm_5fcn_5finterface_2eproto();
void protobuf_ShutdownFile_vm_5fcn_5finterface_2eproto();

class Disk;
class Nic;
class VMMessage;
class instruction;

// ===================================================================

class Disk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:wwit.protobuf.Disk) */ {
 public:
  Disk();
  virtual ~Disk();

  Disk(const Disk& from);

  inline Disk& operator=(const Disk& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Disk& default_instance();

  static const Disk* internal_default_instance();

  void UnsafeArenaSwap(Disk* other);
  void Swap(Disk* other);

  // implements Message ----------------------------------------------

  inline Disk* New() const { return New(NULL); }

  Disk* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Disk& from);
  void MergeFrom(const Disk& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Disk* other);
  void UnsafeMergeFrom(const Disk& from);
  protected:
  explicit Disk(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool boot = 2;
  void clear_boot();
  static const int kBootFieldNumber = 2;
  bool boot() const;
  void set_boot(bool value);

  // optional string image_uuid = 7;
  void clear_image_uuid();
  static const int kImageUuidFieldNumber = 7;
  const ::std::string& image_uuid() const;
  void set_image_uuid(const ::std::string& value);
  void set_image_uuid(const char* value);
  void set_image_uuid(const char* value, size_t size);
  ::std::string* mutable_image_uuid();
  ::std::string* release_image_uuid();
  void set_allocated_image_uuid(::std::string* image_uuid);
  ::std::string* unsafe_arena_release_image_uuid();
  void unsafe_arena_set_allocated_image_uuid(
      ::std::string* image_uuid);

  // optional sint32 size = 9;
  void clear_size();
  static const int kSizeFieldNumber = 9;
  ::google::protobuf::int32 size() const;
  void set_size(::google::protobuf::int32 value);

  // optional string media = 10;
  void clear_media();
  static const int kMediaFieldNumber = 10;
  const ::std::string& media() const;
  void set_media(const ::std::string& value);
  void set_media(const char* value);
  void set_media(const char* value, size_t size);
  ::std::string* mutable_media();
  ::std::string* release_media();
  void set_allocated_media(::std::string* media);
  ::std::string* unsafe_arena_release_media();
  void unsafe_arena_set_allocated_media(
      ::std::string* media);

  // optional string model = 11;
  void clear_model();
  static const int kModelFieldNumber = 11;
  const ::std::string& model() const;
  void set_model(const ::std::string& value);
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  ::std::string* mutable_model();
  ::std::string* release_model();
  void set_allocated_model(::std::string* model);
  ::std::string* unsafe_arena_release_model();
  void unsafe_arena_set_allocated_model(
      ::std::string* model);

  // @@protoc_insertion_point(class_scope:wwit.protobuf.Disk)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr image_uuid_;
  ::google::protobuf::internal::ArenaStringPtr media_;
  ::google::protobuf::internal::ArenaStringPtr model_;
  bool boot_;
  ::google::protobuf::int32 size_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_vm_5fcn_5finterface_2eproto_impl();
  friend void  protobuf_AddDesc_vm_5fcn_5finterface_2eproto_impl();
  friend void protobuf_AssignDesc_vm_5fcn_5finterface_2eproto();
  friend void protobuf_ShutdownFile_vm_5fcn_5finterface_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Disk> Disk_default_instance_;

// -------------------------------------------------------------------

class Nic : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:wwit.protobuf.Nic) */ {
 public:
  Nic();
  virtual ~Nic();

  Nic(const Nic& from);

  inline Nic& operator=(const Nic& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Nic& default_instance();

  static const Nic* internal_default_instance();

  void UnsafeArenaSwap(Nic* other);
  void Swap(Nic* other);

  // implements Message ----------------------------------------------

  inline Nic* New() const { return New(NULL); }

  Nic* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Nic& from);
  void MergeFrom(const Nic& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Nic* other);
  void UnsafeMergeFrom(const Nic& from);
  protected:
  explicit Nic(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated sint32 blocked_outgoing_ports = 6;
  int blocked_outgoing_ports_size() const;
  void clear_blocked_outgoing_ports();
  static const int kBlockedOutgoingPortsFieldNumber = 6;
  ::google::protobuf::int32 blocked_outgoing_ports(int index) const;
  void set_blocked_outgoing_ports(int index, ::google::protobuf::int32 value);
  void add_blocked_outgoing_ports(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      blocked_outgoing_ports() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_blocked_outgoing_ports();

  // repeated string allowed_ips = 7;
  int allowed_ips_size() const;
  void clear_allowed_ips();
  static const int kAllowedIpsFieldNumber = 7;
  const ::std::string& allowed_ips(int index) const;
  ::std::string* mutable_allowed_ips(int index);
  void set_allowed_ips(int index, const ::std::string& value);
  void set_allowed_ips(int index, const char* value);
  void set_allowed_ips(int index, const char* value, size_t size);
  ::std::string* add_allowed_ips();
  void add_allowed_ips(const ::std::string& value);
  void add_allowed_ips(const char* value);
  void add_allowed_ips(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& allowed_ips() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_allowed_ips();

  // optional bool dhcp_server = 8;
  void clear_dhcp_server();
  static const int kDhcpServerFieldNumber = 8;
  bool dhcp_server() const;
  void set_dhcp_server(bool value);

  // optional string gateway = 9;
  void clear_gateway();
  static const int kGatewayFieldNumber = 9;
  const ::std::string& gateway() const;
  void set_gateway(const ::std::string& value);
  void set_gateway(const char* value);
  void set_gateway(const char* value, size_t size);
  ::std::string* mutable_gateway();
  ::std::string* release_gateway();
  void set_allocated_gateway(::std::string* gateway);
  ::std::string* unsafe_arena_release_gateway();
  void unsafe_arena_set_allocated_gateway(
      ::std::string* gateway);

  // repeated string gateways = 10;
  int gateways_size() const;
  void clear_gateways();
  static const int kGatewaysFieldNumber = 10;
  const ::std::string& gateways(int index) const;
  ::std::string* mutable_gateways(int index);
  void set_gateways(int index, const ::std::string& value);
  void set_gateways(int index, const char* value);
  void set_gateways(int index, const char* value, size_t size);
  ::std::string* add_gateways();
  void add_gateways(const ::std::string& value);
  void add_gateways(const char* value);
  void add_gateways(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& gateways() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_gateways();

  // optional string ip = 12;
  void clear_ip();
  static const int kIpFieldNumber = 12;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);
  ::std::string* unsafe_arena_release_ip();
  void unsafe_arena_set_allocated_ip(
      ::std::string* ip);

  // repeated string ips = 13;
  int ips_size() const;
  void clear_ips();
  static const int kIpsFieldNumber = 13;
  const ::std::string& ips(int index) const;
  ::std::string* mutable_ips(int index);
  void set_ips(int index, const ::std::string& value);
  void set_ips(int index, const char* value);
  void set_ips(int index, const char* value, size_t size);
  ::std::string* add_ips();
  void add_ips(const ::std::string& value);
  void add_ips(const char* value);
  void add_ips(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& ips() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_ips();

  // optional string model = 15;
  void clear_model();
  static const int kModelFieldNumber = 15;
  const ::std::string& model() const;
  void set_model(const ::std::string& value);
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  ::std::string* mutable_model();
  ::std::string* release_model();
  void set_allocated_model(::std::string* model);
  ::std::string* unsafe_arena_release_model();
  void unsafe_arena_set_allocated_model(
      ::std::string* model);

  // optional string nic_tag = 19;
  void clear_nic_tag();
  static const int kNicTagFieldNumber = 19;
  const ::std::string& nic_tag() const;
  void set_nic_tag(const ::std::string& value);
  void set_nic_tag(const char* value);
  void set_nic_tag(const char* value, size_t size);
  ::std::string* mutable_nic_tag();
  ::std::string* release_nic_tag();
  void set_allocated_nic_tag(::std::string* nic_tag);
  ::std::string* unsafe_arena_release_nic_tag();
  void unsafe_arena_set_allocated_nic_tag(
      ::std::string* nic_tag);

  // optional bool primary = 20;
  void clear_primary();
  static const int kPrimaryFieldNumber = 20;
  bool primary() const;
  void set_primary(bool value);

  // @@protoc_insertion_point(class_scope:wwit.protobuf.Nic)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > blocked_outgoing_ports_;
  mutable int _blocked_outgoing_ports_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> allowed_ips_;
  ::google::protobuf::RepeatedPtrField< ::std::string> gateways_;
  ::google::protobuf::RepeatedPtrField< ::std::string> ips_;
  ::google::protobuf::internal::ArenaStringPtr gateway_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr model_;
  ::google::protobuf::internal::ArenaStringPtr nic_tag_;
  bool dhcp_server_;
  bool primary_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_vm_5fcn_5finterface_2eproto_impl();
  friend void  protobuf_AddDesc_vm_5fcn_5finterface_2eproto_impl();
  friend void protobuf_AssignDesc_vm_5fcn_5finterface_2eproto();
  friend void protobuf_ShutdownFile_vm_5fcn_5finterface_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Nic> Nic_default_instance_;

// -------------------------------------------------------------------

class VMMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:wwit.protobuf.VMMessage) */ {
 public:
  VMMessage();
  virtual ~VMMessage();

  VMMessage(const VMMessage& from);

  inline VMMessage& operator=(const VMMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const VMMessage& default_instance();

  static const VMMessage* internal_default_instance();

  void UnsafeArenaSwap(VMMessage* other);
  void Swap(VMMessage* other);

  // implements Message ----------------------------------------------

  inline VMMessage* New() const { return New(NULL); }

  VMMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VMMessage& from);
  void MergeFrom(const VMMessage& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VMMessage* other);
  void UnsafeMergeFrom(const VMMessage& from);
  protected:
  explicit VMMessage(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional string alias = 1;
  void clear_alias();
  static const int kAliasFieldNumber = 1;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);
  ::std::string* unsafe_arena_release_alias();
  void unsafe_arena_set_allocated_alias(
      ::std::string* alias);

  // optional bool archive_on_delete = 2;
  void clear_archive_on_delete();
  static const int kArchiveOnDeleteFieldNumber = 2;
  bool archive_on_delete() const;
  void set_archive_on_delete(bool value);

  // optional string brand = 5;
  void clear_brand();
  static const int kBrandFieldNumber = 5;
  const ::std::string& brand() const;
  void set_brand(const ::std::string& value);
  void set_brand(const char* value);
  void set_brand(const char* value, size_t size);
  ::std::string* mutable_brand();
  ::std::string* release_brand();
  void set_allocated_brand(::std::string* brand);
  ::std::string* unsafe_arena_release_brand();
  void unsafe_arena_set_allocated_brand(
      ::std::string* brand);

  // repeated .wwit.protobuf.Disk disks = 9;
  int disks_size() const;
  void clear_disks();
  static const int kDisksFieldNumber = 9;
  const ::wwit::protobuf::Disk& disks(int index) const;
  ::wwit::protobuf::Disk* mutable_disks(int index);
  ::wwit::protobuf::Disk* add_disks();
  ::google::protobuf::RepeatedPtrField< ::wwit::protobuf::Disk >*
      mutable_disks();
  const ::google::protobuf::RepeatedPtrField< ::wwit::protobuf::Disk >&
      disks() const;

  // optional string domain = 12;
  void clear_domain();
  static const int kDomainFieldNumber = 12;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);
  ::std::string* unsafe_arena_release_domain();
  void unsafe_arena_set_allocated_domain(
      ::std::string* domain);

  // optional bool firewall_enable = 14;
  void clear_firewall_enable();
  static const int kFirewallEnableFieldNumber = 14;
  bool firewall_enable() const;
  void set_firewall_enable(bool value);

  // optional string hostname = 16;
  void clear_hostname();
  static const int kHostnameFieldNumber = 16;
  const ::std::string& hostname() const;
  void set_hostname(const ::std::string& value);
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  ::std::string* mutable_hostname();
  ::std::string* release_hostname();
  void set_allocated_hostname(::std::string* hostname);
  ::std::string* unsafe_arena_release_hostname();
  void unsafe_arena_set_allocated_hostname(
      ::std::string* hostname);

  // repeated .wwit.protobuf.Nic nics = 27;
  int nics_size() const;
  void clear_nics();
  static const int kNicsFieldNumber = 27;
  const ::wwit::protobuf::Nic& nics(int index) const;
  ::wwit::protobuf::Nic* mutable_nics(int index);
  ::wwit::protobuf::Nic* add_nics();
  ::google::protobuf::RepeatedPtrField< ::wwit::protobuf::Nic >*
      mutable_nics();
  const ::google::protobuf::RepeatedPtrField< ::wwit::protobuf::Nic >&
      nics() const;

  // optional sint32 ram = 36;
  void clear_ram();
  static const int kRamFieldNumber = 36;
  ::google::protobuf::int32 ram() const;
  void set_ram(::google::protobuf::int32 value);

  // repeated string resolvers = 37;
  int resolvers_size() const;
  void clear_resolvers();
  static const int kResolversFieldNumber = 37;
  const ::std::string& resolvers(int index) const;
  ::std::string* mutable_resolvers(int index);
  void set_resolvers(int index, const ::std::string& value);
  void set_resolvers(int index, const char* value);
  void set_resolvers(int index, const char* value, size_t size);
  ::std::string* add_resolvers();
  void add_resolvers(const ::std::string& value);
  void add_resolvers(const char* value);
  void add_resolvers(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& resolvers() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_resolvers();

  // map<string, string> routes = 38;
  int routes_size() const;
  void clear_routes();
  static const int kRoutesFieldNumber = 38;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      routes() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_routes();

  // optional sint32 vcpus = 43;
  void clear_vcpus();
  static const int kVcpusFieldNumber = 43;
  ::google::protobuf::int32 vcpus() const;
  void set_vcpus(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:wwit.protobuf.VMMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::wwit::protobuf::Disk > disks_;
  ::google::protobuf::RepeatedPtrField< ::wwit::protobuf::Nic > nics_;
  ::google::protobuf::RepeatedPtrField< ::std::string> resolvers_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      VMMessage_RoutesEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > routes_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  ::google::protobuf::internal::ArenaStringPtr brand_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  ::google::protobuf::internal::ArenaStringPtr hostname_;
  bool archive_on_delete_;
  bool firewall_enable_;
  ::google::protobuf::int32 ram_;
  ::google::protobuf::int32 vcpus_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_vm_5fcn_5finterface_2eproto_impl();
  friend void  protobuf_AddDesc_vm_5fcn_5finterface_2eproto_impl();
  friend void protobuf_AssignDesc_vm_5fcn_5finterface_2eproto();
  friend void protobuf_ShutdownFile_vm_5fcn_5finterface_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<VMMessage> VMMessage_default_instance_;

// -------------------------------------------------------------------

class instruction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:wwit.protobuf.instruction) */ {
 public:
  instruction();
  virtual ~instruction();

  instruction(const instruction& from);

  inline instruction& operator=(const instruction& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const instruction& default_instance();

  static const instruction* internal_default_instance();

  void UnsafeArenaSwap(instruction* other);
  void Swap(instruction* other);

  // implements Message ----------------------------------------------

  inline instruction* New() const { return New(NULL); }

  instruction* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const instruction& from);
  void MergeFrom(const instruction& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(instruction* other);
  void UnsafeMergeFrom(const instruction& from);
  protected:
  explicit instruction(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string opcode = 1;
  void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  const ::std::string& opcode() const;
  void set_opcode(const ::std::string& value);
  void set_opcode(const char* value);
  void set_opcode(const char* value, size_t size);
  ::std::string* mutable_opcode();
  ::std::string* release_opcode();
  void set_allocated_opcode(::std::string* opcode);
  ::std::string* unsafe_arena_release_opcode();
  void unsafe_arena_set_allocated_opcode(
      ::std::string* opcode);

  // optional .google.protobuf.Any details = 2;
  bool has_details() const;
  void clear_details();
  static const int kDetailsFieldNumber = 2;
  private:
  void _slow_mutable_details();
  ::google::protobuf::Any* _slow_release_details();
  public:
  const ::google::protobuf::Any& details() const;
  ::google::protobuf::Any* mutable_details();
  ::google::protobuf::Any* release_details();
  void set_allocated_details(::google::protobuf::Any* details);
  ::google::protobuf::Any* unsafe_arena_release_details();
  void unsafe_arena_set_allocated_details(
      ::google::protobuf::Any* details);

  // @@protoc_insertion_point(class_scope:wwit.protobuf.instruction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr opcode_;
  ::google::protobuf::Any* details_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_vm_5fcn_5finterface_2eproto_impl();
  friend void  protobuf_AddDesc_vm_5fcn_5finterface_2eproto_impl();
  friend void protobuf_AssignDesc_vm_5fcn_5finterface_2eproto();
  friend void protobuf_ShutdownFile_vm_5fcn_5finterface_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<instruction> instruction_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Disk

// optional bool boot = 2;
inline void Disk::clear_boot() {
  boot_ = false;
}
inline bool Disk::boot() const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.Disk.boot)
  return boot_;
}
inline void Disk::set_boot(bool value) {
  
  boot_ = value;
  // @@protoc_insertion_point(field_set:wwit.protobuf.Disk.boot)
}

// optional string image_uuid = 7;
inline void Disk::clear_image_uuid() {
  image_uuid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Disk::image_uuid() const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.Disk.image_uuid)
  return image_uuid_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Disk::set_image_uuid(const ::std::string& value) {
  
  image_uuid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:wwit.protobuf.Disk.image_uuid)
}
inline void Disk::set_image_uuid(const char* value) {
  
  image_uuid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:wwit.protobuf.Disk.image_uuid)
}
inline void Disk::set_image_uuid(const char* value,
    size_t size) {
  
  image_uuid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:wwit.protobuf.Disk.image_uuid)
}
inline ::std::string* Disk::mutable_image_uuid() {
  
  // @@protoc_insertion_point(field_mutable:wwit.protobuf.Disk.image_uuid)
  return image_uuid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Disk::release_image_uuid() {
  // @@protoc_insertion_point(field_release:wwit.protobuf.Disk.image_uuid)
  
  return image_uuid_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Disk::unsafe_arena_release_image_uuid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:wwit.protobuf.Disk.image_uuid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return image_uuid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Disk::set_allocated_image_uuid(::std::string* image_uuid) {
  if (image_uuid != NULL) {
    
  } else {
    
  }
  image_uuid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_uuid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:wwit.protobuf.Disk.image_uuid)
}
inline void Disk::unsafe_arena_set_allocated_image_uuid(
    ::std::string* image_uuid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (image_uuid != NULL) {
    
  } else {
    
  }
  image_uuid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      image_uuid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wwit.protobuf.Disk.image_uuid)
}

// optional sint32 size = 9;
inline void Disk::clear_size() {
  size_ = 0;
}
inline ::google::protobuf::int32 Disk::size() const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.Disk.size)
  return size_;
}
inline void Disk::set_size(::google::protobuf::int32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:wwit.protobuf.Disk.size)
}

// optional string media = 10;
inline void Disk::clear_media() {
  media_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Disk::media() const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.Disk.media)
  return media_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Disk::set_media(const ::std::string& value) {
  
  media_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:wwit.protobuf.Disk.media)
}
inline void Disk::set_media(const char* value) {
  
  media_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:wwit.protobuf.Disk.media)
}
inline void Disk::set_media(const char* value,
    size_t size) {
  
  media_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:wwit.protobuf.Disk.media)
}
inline ::std::string* Disk::mutable_media() {
  
  // @@protoc_insertion_point(field_mutable:wwit.protobuf.Disk.media)
  return media_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Disk::release_media() {
  // @@protoc_insertion_point(field_release:wwit.protobuf.Disk.media)
  
  return media_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Disk::unsafe_arena_release_media() {
  // @@protoc_insertion_point(field_unsafe_arena_release:wwit.protobuf.Disk.media)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return media_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Disk::set_allocated_media(::std::string* media) {
  if (media != NULL) {
    
  } else {
    
  }
  media_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), media,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:wwit.protobuf.Disk.media)
}
inline void Disk::unsafe_arena_set_allocated_media(
    ::std::string* media) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (media != NULL) {
    
  } else {
    
  }
  media_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      media, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wwit.protobuf.Disk.media)
}

// optional string model = 11;
inline void Disk::clear_model() {
  model_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Disk::model() const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.Disk.model)
  return model_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Disk::set_model(const ::std::string& value) {
  
  model_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:wwit.protobuf.Disk.model)
}
inline void Disk::set_model(const char* value) {
  
  model_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:wwit.protobuf.Disk.model)
}
inline void Disk::set_model(const char* value,
    size_t size) {
  
  model_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:wwit.protobuf.Disk.model)
}
inline ::std::string* Disk::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:wwit.protobuf.Disk.model)
  return model_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Disk::release_model() {
  // @@protoc_insertion_point(field_release:wwit.protobuf.Disk.model)
  
  return model_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Disk::unsafe_arena_release_model() {
  // @@protoc_insertion_point(field_unsafe_arena_release:wwit.protobuf.Disk.model)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return model_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Disk::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:wwit.protobuf.Disk.model)
}
inline void Disk::unsafe_arena_set_allocated_model(
    ::std::string* model) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (model != NULL) {
    
  } else {
    
  }
  model_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      model, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wwit.protobuf.Disk.model)
}

inline const Disk* Disk::internal_default_instance() {
  return &Disk_default_instance_.get();
}
// -------------------------------------------------------------------

// Nic

// repeated sint32 blocked_outgoing_ports = 6;
inline int Nic::blocked_outgoing_ports_size() const {
  return blocked_outgoing_ports_.size();
}
inline void Nic::clear_blocked_outgoing_ports() {
  blocked_outgoing_ports_.Clear();
}
inline ::google::protobuf::int32 Nic::blocked_outgoing_ports(int index) const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.Nic.blocked_outgoing_ports)
  return blocked_outgoing_ports_.Get(index);
}
inline void Nic::set_blocked_outgoing_ports(int index, ::google::protobuf::int32 value) {
  blocked_outgoing_ports_.Set(index, value);
  // @@protoc_insertion_point(field_set:wwit.protobuf.Nic.blocked_outgoing_ports)
}
inline void Nic::add_blocked_outgoing_ports(::google::protobuf::int32 value) {
  blocked_outgoing_ports_.Add(value);
  // @@protoc_insertion_point(field_add:wwit.protobuf.Nic.blocked_outgoing_ports)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Nic::blocked_outgoing_ports() const {
  // @@protoc_insertion_point(field_list:wwit.protobuf.Nic.blocked_outgoing_ports)
  return blocked_outgoing_ports_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Nic::mutable_blocked_outgoing_ports() {
  // @@protoc_insertion_point(field_mutable_list:wwit.protobuf.Nic.blocked_outgoing_ports)
  return &blocked_outgoing_ports_;
}

// repeated string allowed_ips = 7;
inline int Nic::allowed_ips_size() const {
  return allowed_ips_.size();
}
inline void Nic::clear_allowed_ips() {
  allowed_ips_.Clear();
}
inline const ::std::string& Nic::allowed_ips(int index) const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.Nic.allowed_ips)
  return allowed_ips_.Get(index);
}
inline ::std::string* Nic::mutable_allowed_ips(int index) {
  // @@protoc_insertion_point(field_mutable:wwit.protobuf.Nic.allowed_ips)
  return allowed_ips_.Mutable(index);
}
inline void Nic::set_allowed_ips(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:wwit.protobuf.Nic.allowed_ips)
  allowed_ips_.Mutable(index)->assign(value);
}
inline void Nic::set_allowed_ips(int index, const char* value) {
  allowed_ips_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:wwit.protobuf.Nic.allowed_ips)
}
inline void Nic::set_allowed_ips(int index, const char* value, size_t size) {
  allowed_ips_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:wwit.protobuf.Nic.allowed_ips)
}
inline ::std::string* Nic::add_allowed_ips() {
  // @@protoc_insertion_point(field_add_mutable:wwit.protobuf.Nic.allowed_ips)
  return allowed_ips_.Add();
}
inline void Nic::add_allowed_ips(const ::std::string& value) {
  allowed_ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:wwit.protobuf.Nic.allowed_ips)
}
inline void Nic::add_allowed_ips(const char* value) {
  allowed_ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:wwit.protobuf.Nic.allowed_ips)
}
inline void Nic::add_allowed_ips(const char* value, size_t size) {
  allowed_ips_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:wwit.protobuf.Nic.allowed_ips)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Nic::allowed_ips() const {
  // @@protoc_insertion_point(field_list:wwit.protobuf.Nic.allowed_ips)
  return allowed_ips_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Nic::mutable_allowed_ips() {
  // @@protoc_insertion_point(field_mutable_list:wwit.protobuf.Nic.allowed_ips)
  return &allowed_ips_;
}

// optional bool dhcp_server = 8;
inline void Nic::clear_dhcp_server() {
  dhcp_server_ = false;
}
inline bool Nic::dhcp_server() const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.Nic.dhcp_server)
  return dhcp_server_;
}
inline void Nic::set_dhcp_server(bool value) {
  
  dhcp_server_ = value;
  // @@protoc_insertion_point(field_set:wwit.protobuf.Nic.dhcp_server)
}

// optional string gateway = 9;
inline void Nic::clear_gateway() {
  gateway_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Nic::gateway() const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.Nic.gateway)
  return gateway_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Nic::set_gateway(const ::std::string& value) {
  
  gateway_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:wwit.protobuf.Nic.gateway)
}
inline void Nic::set_gateway(const char* value) {
  
  gateway_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:wwit.protobuf.Nic.gateway)
}
inline void Nic::set_gateway(const char* value,
    size_t size) {
  
  gateway_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:wwit.protobuf.Nic.gateway)
}
inline ::std::string* Nic::mutable_gateway() {
  
  // @@protoc_insertion_point(field_mutable:wwit.protobuf.Nic.gateway)
  return gateway_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Nic::release_gateway() {
  // @@protoc_insertion_point(field_release:wwit.protobuf.Nic.gateway)
  
  return gateway_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Nic::unsafe_arena_release_gateway() {
  // @@protoc_insertion_point(field_unsafe_arena_release:wwit.protobuf.Nic.gateway)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return gateway_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Nic::set_allocated_gateway(::std::string* gateway) {
  if (gateway != NULL) {
    
  } else {
    
  }
  gateway_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gateway,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:wwit.protobuf.Nic.gateway)
}
inline void Nic::unsafe_arena_set_allocated_gateway(
    ::std::string* gateway) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (gateway != NULL) {
    
  } else {
    
  }
  gateway_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      gateway, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wwit.protobuf.Nic.gateway)
}

// repeated string gateways = 10;
inline int Nic::gateways_size() const {
  return gateways_.size();
}
inline void Nic::clear_gateways() {
  gateways_.Clear();
}
inline const ::std::string& Nic::gateways(int index) const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.Nic.gateways)
  return gateways_.Get(index);
}
inline ::std::string* Nic::mutable_gateways(int index) {
  // @@protoc_insertion_point(field_mutable:wwit.protobuf.Nic.gateways)
  return gateways_.Mutable(index);
}
inline void Nic::set_gateways(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:wwit.protobuf.Nic.gateways)
  gateways_.Mutable(index)->assign(value);
}
inline void Nic::set_gateways(int index, const char* value) {
  gateways_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:wwit.protobuf.Nic.gateways)
}
inline void Nic::set_gateways(int index, const char* value, size_t size) {
  gateways_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:wwit.protobuf.Nic.gateways)
}
inline ::std::string* Nic::add_gateways() {
  // @@protoc_insertion_point(field_add_mutable:wwit.protobuf.Nic.gateways)
  return gateways_.Add();
}
inline void Nic::add_gateways(const ::std::string& value) {
  gateways_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:wwit.protobuf.Nic.gateways)
}
inline void Nic::add_gateways(const char* value) {
  gateways_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:wwit.protobuf.Nic.gateways)
}
inline void Nic::add_gateways(const char* value, size_t size) {
  gateways_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:wwit.protobuf.Nic.gateways)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Nic::gateways() const {
  // @@protoc_insertion_point(field_list:wwit.protobuf.Nic.gateways)
  return gateways_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Nic::mutable_gateways() {
  // @@protoc_insertion_point(field_mutable_list:wwit.protobuf.Nic.gateways)
  return &gateways_;
}

// optional string ip = 12;
inline void Nic::clear_ip() {
  ip_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Nic::ip() const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.Nic.ip)
  return ip_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Nic::set_ip(const ::std::string& value) {
  
  ip_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:wwit.protobuf.Nic.ip)
}
inline void Nic::set_ip(const char* value) {
  
  ip_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:wwit.protobuf.Nic.ip)
}
inline void Nic::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:wwit.protobuf.Nic.ip)
}
inline ::std::string* Nic::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:wwit.protobuf.Nic.ip)
  return ip_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Nic::release_ip() {
  // @@protoc_insertion_point(field_release:wwit.protobuf.Nic.ip)
  
  return ip_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Nic::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:wwit.protobuf.Nic.ip)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return ip_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Nic::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:wwit.protobuf.Nic.ip)
}
inline void Nic::unsafe_arena_set_allocated_ip(
    ::std::string* ip) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ip, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wwit.protobuf.Nic.ip)
}

// repeated string ips = 13;
inline int Nic::ips_size() const {
  return ips_.size();
}
inline void Nic::clear_ips() {
  ips_.Clear();
}
inline const ::std::string& Nic::ips(int index) const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.Nic.ips)
  return ips_.Get(index);
}
inline ::std::string* Nic::mutable_ips(int index) {
  // @@protoc_insertion_point(field_mutable:wwit.protobuf.Nic.ips)
  return ips_.Mutable(index);
}
inline void Nic::set_ips(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:wwit.protobuf.Nic.ips)
  ips_.Mutable(index)->assign(value);
}
inline void Nic::set_ips(int index, const char* value) {
  ips_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:wwit.protobuf.Nic.ips)
}
inline void Nic::set_ips(int index, const char* value, size_t size) {
  ips_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:wwit.protobuf.Nic.ips)
}
inline ::std::string* Nic::add_ips() {
  // @@protoc_insertion_point(field_add_mutable:wwit.protobuf.Nic.ips)
  return ips_.Add();
}
inline void Nic::add_ips(const ::std::string& value) {
  ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:wwit.protobuf.Nic.ips)
}
inline void Nic::add_ips(const char* value) {
  ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:wwit.protobuf.Nic.ips)
}
inline void Nic::add_ips(const char* value, size_t size) {
  ips_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:wwit.protobuf.Nic.ips)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Nic::ips() const {
  // @@protoc_insertion_point(field_list:wwit.protobuf.Nic.ips)
  return ips_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Nic::mutable_ips() {
  // @@protoc_insertion_point(field_mutable_list:wwit.protobuf.Nic.ips)
  return &ips_;
}

// optional string model = 15;
inline void Nic::clear_model() {
  model_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Nic::model() const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.Nic.model)
  return model_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Nic::set_model(const ::std::string& value) {
  
  model_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:wwit.protobuf.Nic.model)
}
inline void Nic::set_model(const char* value) {
  
  model_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:wwit.protobuf.Nic.model)
}
inline void Nic::set_model(const char* value,
    size_t size) {
  
  model_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:wwit.protobuf.Nic.model)
}
inline ::std::string* Nic::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:wwit.protobuf.Nic.model)
  return model_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Nic::release_model() {
  // @@protoc_insertion_point(field_release:wwit.protobuf.Nic.model)
  
  return model_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Nic::unsafe_arena_release_model() {
  // @@protoc_insertion_point(field_unsafe_arena_release:wwit.protobuf.Nic.model)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return model_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Nic::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:wwit.protobuf.Nic.model)
}
inline void Nic::unsafe_arena_set_allocated_model(
    ::std::string* model) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (model != NULL) {
    
  } else {
    
  }
  model_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      model, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wwit.protobuf.Nic.model)
}

// optional string nic_tag = 19;
inline void Nic::clear_nic_tag() {
  nic_tag_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Nic::nic_tag() const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.Nic.nic_tag)
  return nic_tag_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Nic::set_nic_tag(const ::std::string& value) {
  
  nic_tag_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:wwit.protobuf.Nic.nic_tag)
}
inline void Nic::set_nic_tag(const char* value) {
  
  nic_tag_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:wwit.protobuf.Nic.nic_tag)
}
inline void Nic::set_nic_tag(const char* value,
    size_t size) {
  
  nic_tag_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:wwit.protobuf.Nic.nic_tag)
}
inline ::std::string* Nic::mutable_nic_tag() {
  
  // @@protoc_insertion_point(field_mutable:wwit.protobuf.Nic.nic_tag)
  return nic_tag_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Nic::release_nic_tag() {
  // @@protoc_insertion_point(field_release:wwit.protobuf.Nic.nic_tag)
  
  return nic_tag_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Nic::unsafe_arena_release_nic_tag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:wwit.protobuf.Nic.nic_tag)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return nic_tag_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Nic::set_allocated_nic_tag(::std::string* nic_tag) {
  if (nic_tag != NULL) {
    
  } else {
    
  }
  nic_tag_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nic_tag,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:wwit.protobuf.Nic.nic_tag)
}
inline void Nic::unsafe_arena_set_allocated_nic_tag(
    ::std::string* nic_tag) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (nic_tag != NULL) {
    
  } else {
    
  }
  nic_tag_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      nic_tag, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wwit.protobuf.Nic.nic_tag)
}

// optional bool primary = 20;
inline void Nic::clear_primary() {
  primary_ = false;
}
inline bool Nic::primary() const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.Nic.primary)
  return primary_;
}
inline void Nic::set_primary(bool value) {
  
  primary_ = value;
  // @@protoc_insertion_point(field_set:wwit.protobuf.Nic.primary)
}

inline const Nic* Nic::internal_default_instance() {
  return &Nic_default_instance_.get();
}
// -------------------------------------------------------------------

// VMMessage

// optional string alias = 1;
inline void VMMessage::clear_alias() {
  alias_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& VMMessage::alias() const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.VMMessage.alias)
  return alias_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VMMessage::set_alias(const ::std::string& value) {
  
  alias_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:wwit.protobuf.VMMessage.alias)
}
inline void VMMessage::set_alias(const char* value) {
  
  alias_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:wwit.protobuf.VMMessage.alias)
}
inline void VMMessage::set_alias(const char* value,
    size_t size) {
  
  alias_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:wwit.protobuf.VMMessage.alias)
}
inline ::std::string* VMMessage::mutable_alias() {
  
  // @@protoc_insertion_point(field_mutable:wwit.protobuf.VMMessage.alias)
  return alias_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* VMMessage::release_alias() {
  // @@protoc_insertion_point(field_release:wwit.protobuf.VMMessage.alias)
  
  return alias_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* VMMessage::unsafe_arena_release_alias() {
  // @@protoc_insertion_point(field_unsafe_arena_release:wwit.protobuf.VMMessage.alias)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return alias_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void VMMessage::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    
  } else {
    
  }
  alias_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:wwit.protobuf.VMMessage.alias)
}
inline void VMMessage::unsafe_arena_set_allocated_alias(
    ::std::string* alias) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (alias != NULL) {
    
  } else {
    
  }
  alias_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      alias, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wwit.protobuf.VMMessage.alias)
}

// optional bool archive_on_delete = 2;
inline void VMMessage::clear_archive_on_delete() {
  archive_on_delete_ = false;
}
inline bool VMMessage::archive_on_delete() const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.VMMessage.archive_on_delete)
  return archive_on_delete_;
}
inline void VMMessage::set_archive_on_delete(bool value) {
  
  archive_on_delete_ = value;
  // @@protoc_insertion_point(field_set:wwit.protobuf.VMMessage.archive_on_delete)
}

// optional string brand = 5;
inline void VMMessage::clear_brand() {
  brand_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& VMMessage::brand() const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.VMMessage.brand)
  return brand_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VMMessage::set_brand(const ::std::string& value) {
  
  brand_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:wwit.protobuf.VMMessage.brand)
}
inline void VMMessage::set_brand(const char* value) {
  
  brand_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:wwit.protobuf.VMMessage.brand)
}
inline void VMMessage::set_brand(const char* value,
    size_t size) {
  
  brand_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:wwit.protobuf.VMMessage.brand)
}
inline ::std::string* VMMessage::mutable_brand() {
  
  // @@protoc_insertion_point(field_mutable:wwit.protobuf.VMMessage.brand)
  return brand_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* VMMessage::release_brand() {
  // @@protoc_insertion_point(field_release:wwit.protobuf.VMMessage.brand)
  
  return brand_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* VMMessage::unsafe_arena_release_brand() {
  // @@protoc_insertion_point(field_unsafe_arena_release:wwit.protobuf.VMMessage.brand)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return brand_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void VMMessage::set_allocated_brand(::std::string* brand) {
  if (brand != NULL) {
    
  } else {
    
  }
  brand_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brand,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:wwit.protobuf.VMMessage.brand)
}
inline void VMMessage::unsafe_arena_set_allocated_brand(
    ::std::string* brand) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (brand != NULL) {
    
  } else {
    
  }
  brand_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      brand, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wwit.protobuf.VMMessage.brand)
}

// repeated .wwit.protobuf.Disk disks = 9;
inline int VMMessage::disks_size() const {
  return disks_.size();
}
inline void VMMessage::clear_disks() {
  disks_.Clear();
}
inline const ::wwit::protobuf::Disk& VMMessage::disks(int index) const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.VMMessage.disks)
  return disks_.Get(index);
}
inline ::wwit::protobuf::Disk* VMMessage::mutable_disks(int index) {
  // @@protoc_insertion_point(field_mutable:wwit.protobuf.VMMessage.disks)
  return disks_.Mutable(index);
}
inline ::wwit::protobuf::Disk* VMMessage::add_disks() {
  // @@protoc_insertion_point(field_add:wwit.protobuf.VMMessage.disks)
  return disks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::wwit::protobuf::Disk >*
VMMessage::mutable_disks() {
  // @@protoc_insertion_point(field_mutable_list:wwit.protobuf.VMMessage.disks)
  return &disks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::wwit::protobuf::Disk >&
VMMessage::disks() const {
  // @@protoc_insertion_point(field_list:wwit.protobuf.VMMessage.disks)
  return disks_;
}

// optional string domain = 12;
inline void VMMessage::clear_domain() {
  domain_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& VMMessage::domain() const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.VMMessage.domain)
  return domain_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VMMessage::set_domain(const ::std::string& value) {
  
  domain_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:wwit.protobuf.VMMessage.domain)
}
inline void VMMessage::set_domain(const char* value) {
  
  domain_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:wwit.protobuf.VMMessage.domain)
}
inline void VMMessage::set_domain(const char* value,
    size_t size) {
  
  domain_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:wwit.protobuf.VMMessage.domain)
}
inline ::std::string* VMMessage::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:wwit.protobuf.VMMessage.domain)
  return domain_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* VMMessage::release_domain() {
  // @@protoc_insertion_point(field_release:wwit.protobuf.VMMessage.domain)
  
  return domain_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* VMMessage::unsafe_arena_release_domain() {
  // @@protoc_insertion_point(field_unsafe_arena_release:wwit.protobuf.VMMessage.domain)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return domain_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void VMMessage::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    
  } else {
    
  }
  domain_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:wwit.protobuf.VMMessage.domain)
}
inline void VMMessage::unsafe_arena_set_allocated_domain(
    ::std::string* domain) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (domain != NULL) {
    
  } else {
    
  }
  domain_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      domain, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wwit.protobuf.VMMessage.domain)
}

// optional bool firewall_enable = 14;
inline void VMMessage::clear_firewall_enable() {
  firewall_enable_ = false;
}
inline bool VMMessage::firewall_enable() const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.VMMessage.firewall_enable)
  return firewall_enable_;
}
inline void VMMessage::set_firewall_enable(bool value) {
  
  firewall_enable_ = value;
  // @@protoc_insertion_point(field_set:wwit.protobuf.VMMessage.firewall_enable)
}

// optional string hostname = 16;
inline void VMMessage::clear_hostname() {
  hostname_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& VMMessage::hostname() const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.VMMessage.hostname)
  return hostname_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VMMessage::set_hostname(const ::std::string& value) {
  
  hostname_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:wwit.protobuf.VMMessage.hostname)
}
inline void VMMessage::set_hostname(const char* value) {
  
  hostname_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:wwit.protobuf.VMMessage.hostname)
}
inline void VMMessage::set_hostname(const char* value,
    size_t size) {
  
  hostname_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:wwit.protobuf.VMMessage.hostname)
}
inline ::std::string* VMMessage::mutable_hostname() {
  
  // @@protoc_insertion_point(field_mutable:wwit.protobuf.VMMessage.hostname)
  return hostname_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* VMMessage::release_hostname() {
  // @@protoc_insertion_point(field_release:wwit.protobuf.VMMessage.hostname)
  
  return hostname_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* VMMessage::unsafe_arena_release_hostname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:wwit.protobuf.VMMessage.hostname)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return hostname_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void VMMessage::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    
  } else {
    
  }
  hostname_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:wwit.protobuf.VMMessage.hostname)
}
inline void VMMessage::unsafe_arena_set_allocated_hostname(
    ::std::string* hostname) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (hostname != NULL) {
    
  } else {
    
  }
  hostname_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      hostname, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wwit.protobuf.VMMessage.hostname)
}

// repeated .wwit.protobuf.Nic nics = 27;
inline int VMMessage::nics_size() const {
  return nics_.size();
}
inline void VMMessage::clear_nics() {
  nics_.Clear();
}
inline const ::wwit::protobuf::Nic& VMMessage::nics(int index) const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.VMMessage.nics)
  return nics_.Get(index);
}
inline ::wwit::protobuf::Nic* VMMessage::mutable_nics(int index) {
  // @@protoc_insertion_point(field_mutable:wwit.protobuf.VMMessage.nics)
  return nics_.Mutable(index);
}
inline ::wwit::protobuf::Nic* VMMessage::add_nics() {
  // @@protoc_insertion_point(field_add:wwit.protobuf.VMMessage.nics)
  return nics_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::wwit::protobuf::Nic >*
VMMessage::mutable_nics() {
  // @@protoc_insertion_point(field_mutable_list:wwit.protobuf.VMMessage.nics)
  return &nics_;
}
inline const ::google::protobuf::RepeatedPtrField< ::wwit::protobuf::Nic >&
VMMessage::nics() const {
  // @@protoc_insertion_point(field_list:wwit.protobuf.VMMessage.nics)
  return nics_;
}

// optional sint32 ram = 36;
inline void VMMessage::clear_ram() {
  ram_ = 0;
}
inline ::google::protobuf::int32 VMMessage::ram() const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.VMMessage.ram)
  return ram_;
}
inline void VMMessage::set_ram(::google::protobuf::int32 value) {
  
  ram_ = value;
  // @@protoc_insertion_point(field_set:wwit.protobuf.VMMessage.ram)
}

// repeated string resolvers = 37;
inline int VMMessage::resolvers_size() const {
  return resolvers_.size();
}
inline void VMMessage::clear_resolvers() {
  resolvers_.Clear();
}
inline const ::std::string& VMMessage::resolvers(int index) const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.VMMessage.resolvers)
  return resolvers_.Get(index);
}
inline ::std::string* VMMessage::mutable_resolvers(int index) {
  // @@protoc_insertion_point(field_mutable:wwit.protobuf.VMMessage.resolvers)
  return resolvers_.Mutable(index);
}
inline void VMMessage::set_resolvers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:wwit.protobuf.VMMessage.resolvers)
  resolvers_.Mutable(index)->assign(value);
}
inline void VMMessage::set_resolvers(int index, const char* value) {
  resolvers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:wwit.protobuf.VMMessage.resolvers)
}
inline void VMMessage::set_resolvers(int index, const char* value, size_t size) {
  resolvers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:wwit.protobuf.VMMessage.resolvers)
}
inline ::std::string* VMMessage::add_resolvers() {
  // @@protoc_insertion_point(field_add_mutable:wwit.protobuf.VMMessage.resolvers)
  return resolvers_.Add();
}
inline void VMMessage::add_resolvers(const ::std::string& value) {
  resolvers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:wwit.protobuf.VMMessage.resolvers)
}
inline void VMMessage::add_resolvers(const char* value) {
  resolvers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:wwit.protobuf.VMMessage.resolvers)
}
inline void VMMessage::add_resolvers(const char* value, size_t size) {
  resolvers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:wwit.protobuf.VMMessage.resolvers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VMMessage::resolvers() const {
  // @@protoc_insertion_point(field_list:wwit.protobuf.VMMessage.resolvers)
  return resolvers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VMMessage::mutable_resolvers() {
  // @@protoc_insertion_point(field_mutable_list:wwit.protobuf.VMMessage.resolvers)
  return &resolvers_;
}

// map<string, string> routes = 38;
inline int VMMessage::routes_size() const {
  return routes_.size();
}
inline void VMMessage::clear_routes() {
  routes_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
VMMessage::routes() const {
  // @@protoc_insertion_point(field_map:wwit.protobuf.VMMessage.routes)
  return routes_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
VMMessage::mutable_routes() {
  // @@protoc_insertion_point(field_mutable_map:wwit.protobuf.VMMessage.routes)
  return routes_.MutableMap();
}

// optional sint32 vcpus = 43;
inline void VMMessage::clear_vcpus() {
  vcpus_ = 0;
}
inline ::google::protobuf::int32 VMMessage::vcpus() const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.VMMessage.vcpus)
  return vcpus_;
}
inline void VMMessage::set_vcpus(::google::protobuf::int32 value) {
  
  vcpus_ = value;
  // @@protoc_insertion_point(field_set:wwit.protobuf.VMMessage.vcpus)
}

inline const VMMessage* VMMessage::internal_default_instance() {
  return &VMMessage_default_instance_.get();
}
// -------------------------------------------------------------------

// instruction

// optional string opcode = 1;
inline void instruction::clear_opcode() {
  opcode_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& instruction::opcode() const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.instruction.opcode)
  return opcode_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void instruction::set_opcode(const ::std::string& value) {
  
  opcode_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:wwit.protobuf.instruction.opcode)
}
inline void instruction::set_opcode(const char* value) {
  
  opcode_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:wwit.protobuf.instruction.opcode)
}
inline void instruction::set_opcode(const char* value,
    size_t size) {
  
  opcode_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:wwit.protobuf.instruction.opcode)
}
inline ::std::string* instruction::mutable_opcode() {
  
  // @@protoc_insertion_point(field_mutable:wwit.protobuf.instruction.opcode)
  return opcode_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* instruction::release_opcode() {
  // @@protoc_insertion_point(field_release:wwit.protobuf.instruction.opcode)
  
  return opcode_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* instruction::unsafe_arena_release_opcode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:wwit.protobuf.instruction.opcode)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return opcode_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void instruction::set_allocated_opcode(::std::string* opcode) {
  if (opcode != NULL) {
    
  } else {
    
  }
  opcode_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), opcode,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:wwit.protobuf.instruction.opcode)
}
inline void instruction::unsafe_arena_set_allocated_opcode(
    ::std::string* opcode) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (opcode != NULL) {
    
  } else {
    
  }
  opcode_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      opcode, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wwit.protobuf.instruction.opcode)
}

// optional .google.protobuf.Any details = 2;
inline bool instruction::has_details() const {
  return this != internal_default_instance() && details_ != NULL;
}
inline void instruction::clear_details() {
  if (GetArenaNoVirtual() == NULL && details_ != NULL) delete details_;
  details_ = NULL;
}
inline const ::google::protobuf::Any& instruction::details() const {
  // @@protoc_insertion_point(field_get:wwit.protobuf.instruction.details)
  return details_ != NULL ? *details_
                         : *::google::protobuf::Any::internal_default_instance();
}
inline ::google::protobuf::Any* instruction::mutable_details() {
  
  if (details_ == NULL) {
    _slow_mutable_details();
  }
  // @@protoc_insertion_point(field_mutable:wwit.protobuf.instruction.details)
  return details_;
}
inline ::google::protobuf::Any* instruction::release_details() {
  // @@protoc_insertion_point(field_release:wwit.protobuf.instruction.details)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_details();
  } else {
    ::google::protobuf::Any* temp = details_;
    details_ = NULL;
    return temp;
  }
}
inline  void instruction::set_allocated_details(::google::protobuf::Any* details) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete details_;
  }
  if (details != NULL) {
    if (message_arena != NULL) {
      message_arena->Own(details);
    }
  }
  details_ = details;
  if (details) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:wwit.protobuf.instruction.details)
}

inline const instruction* instruction::internal_default_instance() {
  return &instruction_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace wwit

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_vm_5fcn_5finterface_2eproto__INCLUDED
